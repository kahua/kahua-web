;;-*- mode: kahua; coding: utf-8 -*-
;; Kahua website macro handling
;;
;;  Copyright (c) 2004-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2004-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: macro.kahua,v 1.60 2007/07/07 21:04:27 bizenn Exp $

(use gauche.collection)
(use srfi-11)
(use srfi-19)
(use sendmail)
(use util.list)
(use file.util)
(use www.cgi)
(use rfc.uri)
(use gauche.parameter)
(use sxml.ssax)
(use sxml.tools)

(define *macro-alist* '())

(define-syntax define-wiki-macro 
  (syntax-rules ()
    ((_ (name . args) . body)
     (push! *macro-alist*
	    (let1 handler (lambda args . body)
	      (cons 'name (lambda (expr)
			    (if (procedure-arity-includes? handler (length expr))
				(apply handler expr)
				(unhandled-macro 'name expr)))))))
    ((_ alias name)
     (cond ((assq-ref *macro-alist* 'name)
	    => (lambda (proc) (push! *macro-alist* (cons 'alias proc))))
	   (else (push! *macro-alist*
			(cons 'alias
			      (cond ((assq-ref *macro-alist* 'name) => cdr)
				    (else
				     (lambda (expr)
				       (cond ((assq-ref *macro-alist* 'name) => cdr)
					     (else (unhandled-macro (car expr) (cdr expr))))))))))))
    ))

(define (format-macro expr _)
  (define (safe-apply handler)
    (guard (e (else `((pre (@ (class "macro-error"))
			   "Error in expanding macro: "
			   (strong ,(write-to-string expr))
			   "\n"
			   ,(kahua-error-string e (kahua-current-user))))))
      (handler (cdr expr))))
  (cond ((assq-ref *macro-alist* (car expr)) => safe-apply)
        (else (unhandled-macro (car expr) (cdr expr)))))

(define (unhandled-macro name expr)
  `("##" ,(write-to-string (cons name expr))))

;;=========================================================
;; Macros
;;

;;---------------------------------------------------------
;; A couple of test macros
;;
(define-wiki-macro (test-macro . args) ;; to see if macro is working
  `(,(format "Test macro output ~s" args)))

(define-wiki-macro (test-error . args) ;; to see if macro error is handled
  (error "test-error: " args))

;;---------------------------------------------------------
;; Index, cindex
;;
(define-wiki-macro (index prefix)
  (let1 pages (filter (lambda (data)
                         (string-prefix? (x->string prefix) (ref data 'name)))
                      (all-page-data))
    `((ul ,@(map (lambda (data) `(li ,@(format-wikiname (ref data 'name))))
                 (sort pages pagename<?))))))

(define-wiki-macro (cindex prefix . maybe-delimiter)
  (let ((delim (get-optional maybe-delimiter " "))
        (pages (filter (lambda (data)
                         (string-prefix? (x->string prefix) (ref data 'name)))
                       (all-page-data))))
    (fold-right (lambda (data seed)
                  (if (null? seed)
                    (format-wikiname (ref data 'name))
                    (append (format-wikiname (ref data 'name))
                            (cons delim seed))))
                '()
                (sort pages pagename<?))))

(define-wiki-macro (tree-index prefix)
  (define (render forest)
    `((ul ,@(map (lambda (tree)
                   `(li ,@(format-wikiname (car tree))
                        ,@(if (null? (cddr tree)) '()
                              (render (cddr tree)))))
                 (sort forest (lambda (a b) (string<? (car a) (car b)))))
          )))

  (define (find-parent me forest)
    (find (lambda (x)
            (and (not (eq? me x))
                 (string-prefix? #`",(car x)/" (car me))
                 (not (string-scan (string-drop (car me)
                                                (+ (string-length (car x)) 1))
                                   #\/))))
          forest))
  
  (let1 page-data  ;; ((name root? . children) ...)
      (filter-map (lambda (data)
                    (and (string-prefix? (x->string prefix) (ref data 'name))
                         (list (ref data 'name) #t)))
                  (map identity (all-page-data)))
    (let loop ((pages page-data))
      (cond
       ((null? pages) (render (filter (cut cadr <>) page-data)))
       ((find-parent (car pages) page-data)
        => (lambda (parent)
             (set! (cadr (car pages)) #f)
             (push! (cddr parent) (car pages))
             (loop (cdr pages))))
       (else (loop (cdr pages)))))
    ))
  

;;---------------------------------------------------------
;; Inline image
;;
(define-wiki-macro (img url . attrs)
  (define (make-img url)
    `((img (@ (src ,url) ,@(filter allowed-img-attr? attrs)))))
  (define (valid-src? url)
    (#/\.(?:jpg|png|gif)$/ url))
  (define allowed-img-attrs 
    (append '(class id title)
	    '(alt longdesc width height)))
  (define (allowed-img-attr? attr)
    (memq (car attr) allowed-img-attrs))
  (receive (img form? update-form-link)
      (uploadable-inline-static-object make-img valid-src? (x->string url))
    (if form?
	img
	(update-form-link
	 (cond ((external-link-maker attrs) => (cut <> img))
	       ((wikiname-link-maker attrs) => (cut <> img))
	       (else                           img))))))

(define (external-link-maker attrs)
  (and-let* ((v (assq-ref attrs 'href))
	     ((pair? v)))
    (lambda (elm) `((a (@ (href ,(car v))) ,@elm)))))

(define (wikiname-link-maker attrs)
  (and-let* ((v (assq-ref attrs 'wikiname))
	     ((pair? v))
	     (absname (canon-pagename (car v))))
    (if (or (lookup-virtual-page absname)
	    (page-data-exists? absname))
	(lambda (elm)
	  `((a/cont (@@ (cont ,show ,@(pagename-split absname))) ,@elm)))
	(lambda (elm)
	  `((span (@ (class "wiki-link-new"))
		  ,@elm
		  (a/cont (@@ (cont ,edit ,@(pagename-split absname))) "?")))))))

;;---------------------------------------------------------
;; Java Applet Embedding
;;
(define-wiki-macro (applet code params . attrs)
  (define allowed-attrs
    (append '(class id title)
	    '(width height archive alt name align hspace vspace)))
  (define (allowed-attr? attr)
    (memq (car attr) allowed-attrs))
  (define (make-applet code)
    `((applet (@ (code ,code)
		 ,@(codebase attrs)
		 ,@(filter allowed-attr? attrs))
	      ,@(make-params params))))
  (define (codebase attrs)
    (cond ((assq-ref attrs 'codebase)
	   => (lambda (cb)
		(if (null? cb)
		    `((codebase ,(kahua-static-document-url (kahua-worker-type))))
		    (let1 cb (car cb)
		      (if (and (not (string-null? cb))
			       (char=? #\/ (string-ref cb 0)))
			  `((codebase ,cb))
			  `((codebase ,(kahua-static-document-url (kahua-worker-type) cb))))))))
	  (else `((codebase ,(kahua-static-document-url (kahua-worker-type)))))))

  (make-applet code))

(define (make-params params)
  (map (lambda (e) `(param (@ (name ,(car e)) (value ,(cadr e))))) params))

;;---------------------------------------------------------
;; Flash Movie Embedding
;;
(define-wiki-macro (flash code . attrs)
  (define allowed-common-attrs
    (append '(class id title) '(width height align base)))
  (define allowed-object-params
    '(devicefont play loop quality bgcolor scale salign menu wmode))
  (define allowed-embed-attrs
    '(devicefont play loop quality bgcolor scale salign menu wmode))
  (define allowed-params
    '(play loop quality bgcolor scale salign base menu))
  (define (allowed? attr al)
    (memq (car attr) al))
  (define (code-path code)
    (receive (scheme _ host _ path _ _) (uri-parse code)
      (cond ((and scheme host
		  (or (string=? scheme "http")
		      (string=? scheme "https")))
	     code)
	    ((and (not (string-null? path))
		  (char=? #\/ (string-ref path 0)))
	     code)
	    (else (kahua-static-document-url (kahua-worker-type) code)))))

  (define (make-object code)
    `((object
       (@ (classid "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000")
	  (codebase "http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab")
	  (codetype "application/x-shockwave-flash")
	  ,@(filter (cut allowed? <> allowed-common-attrs) attrs))
       (param (@ (name "movie") (value ,code)))
       ,@(make-params (filter (cut allowed? <> allowed-object-params) attrs))
       (embed
	(@ (src ,code)
	   (pluginspage "http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash")
	   (type "application/x-shockwave-flash")
	   ,@(filter (cut allowed? <> allowed-common-attrs) attrs)
	   ,@(filter (cut allowed? <> allowed-embed-attrs) attrs))))))
  (make-object (code-path code)))

;;---------------------------------------------------------
;; generate PDF
(define-wiki-macro (pdf-page)
  (let1 p (current-page)
    `((a/cont (@@ (cont ,(lambda ()
                           `((pdf
                              ,@(parameterize ((current-page p))
                                  (wiliki:format-content
                                   (ref p 'content))))))))
              "PDF"))))

;;---------------------------------------------------------
;; Temporary Contents
;;
(define ***tmp*** (make-parameter '()))
(define-wiki-macro (temporary-contents)
  (***tmp***))

;;---------------------------------------------------------
;; Message to you
;;
;; ##(message-to ("alice" "bob") "Hi. Enjoy hacking?")
;; ##(message-to "alice" "Do you love hacking with Kahua?")

(define-wiki-macro (message-to you msg)
  (or (and-let* ((user (kahua-current-user))
		 (name (ref user 'login-name))
                 (_ (or (and (list? you) (find (cut string=? name <>) you))
			(string=? name you))))
        `((p ,msg)))
      '()))

;;---------------------------------------------------------
;; Include
;;
(define-constant starting-page (make-parameter #f))
(define (get-starting-page . maybe-page)
  (or (starting-page)
      (get-optional maybe-page (current-page))))
(define-wiki-macro (include pagename)
  (let1 name (canon-pagename pagename)
    (cond ((and name (get-page name))
	   => (lambda (page)
		(parameterize ((starting-page (get-starting-page))
			       (current-page page))
		  (wiliki:format-content page))))
          (else (unhandled-macro 'include (list pagename))))))

;;---------------------------------------------------------
;; Page-set list
;;
(define-wiki-macro (page-set setname . opts)
  (define (make-page-link name)
    (if (equal? name "/")
	`((a/cont (@@ (cont ,show)) ,*kahua-web-title* ": Top Page"))
	(format-wikiname name)))
  (define (delete-pages! page-set pages)
    (slot-set! page-set 'pages
	       (remove (cut member <> pages) (slot-ref page-set 'pages))))
  (or (and-let* ((set   (get-page-set (x->string setname)))
                 (num-items (x->integer (get-optional opts 0)))
                 (page-data
                  (filter-map get-page-data-from-id
                              (if (zero? num-items)
				  (ref set 'pages)
				  (take* (slot-ref set 'pages) num-items)))))
	(receive (make-form make-check)
	    (if (kahua-authorized? 'admin)
		(values (lambda (e)
			  (let1 page (get-starting-page)
			    `((form/cont
			       (@@ (cont ,(entry-lambda (:mvkeyword delete-page)
					    (unless (null? delete-page)
					      (delete-pages! set delete-page)
					      (run-hook save-page-hook))
					    (redirect-to page))))
			       ,@e
			       ,(make-submit "delete")))))
			(lambda (pid)
			  (list (make-checkbox "delete-page" pid "delete?" #f))))
		(values identity (lambda _ '())))
	  (make-form
	   `((ul (@ (class "page-set"))
		 ,@(map (lambda (data)
			  `(li (span (@ (class "page-data-link"))
				     ,@(make-page-link (slot-ref data 'name)))
			       (span (@ (class "page-update-time"))
				     " (" ,(standard-fmt-time (slot-ref data 'mtime)) ")")
			       ,@(make-check (key-of data))))
			page-data))))))
      (unhandled-macro 'page-set (cons setname opts))))

;;---------------------------------------------------------
;; Table of contents
;;
(define-wiki-macro (toc . maybe-pagename)
  (let1 page (or (and-let* ((name (get-optional maybe-pagename #f))
                            (cname (canon-pagename (x->string name))))
                   (get-page cname))
                 (wiliki-current-page))
    (if (not page)
      (unhandled-macro 'toc maybe-pagename)
      (let1 pagename (and page (ref page 'key))
        ;; MAKE-UL takes one heading entry (level . text) and tries to fit
        ;; it in a tree.  If the entry is the same level, we accumulate
        ;; the heading entries to ITEMS.  If the entry is deeper than the
        ;; current, we recurse into the deeper level but uses CPS to continue
        ;; the current level after the lower levels are collected.
        ;; NB: hs is a _reverse_ ordered list of all headings (level . text).
        ;; Since it's reversed, we can scan forward to find the heading
        ;; nesting.
        (define (make-ul hs cur items cont)
          (cond ((null? hs)
                 (cont '() `(ul ,@items)))
                ((= (caar hs) cur) ;; same level
                 (make-ul (cdr hs) cur
                          (cons (make-anchor (nestings hs)) items)
                          cont))
                ((> (caar hs) cur) ;; deeper level
                 (make-ul hs (+ cur 1) '()
                          (lambda (hs ul)
                            (make-ul hs cur (cons ul items) cont))))
                (else ;; we finished the current level and under.  pass
                      ;; the result to the continuation proc.
                 (cont hs `(ul ,@items)))))

        (define (nestings hs)
          (reverse!
           (cdr
            (fold (lambda (elt seed)
                    (let ((level (car elt))
                          (cur-level (car seed)))
                      (if (< level cur-level)
                        (list* level (cdr elt) (cdr seed))
                        seed)))
                  '(6)
                  hs))))

        (define (make-anchor headings)
          (let ((id (wiliki:calculate-heading-id headings)))
            `(li (a/cont (@@ (cont ,show
                                   ,@(pagename-split (ref page 'key)))
                             (fragment ,id))
                         ,@(wiliki:format-line-plainly (car headings))))))

        (let1 headings
            (page-lines-fold
             page
             (lambda (l r)
               (cond ((#/^(\*{1,}) / l)
                      => (lambda (m)
                           (acons (string-length (m 1)) (m 'after) r)))
                     (else r)))
             '()
             :follow-includes? #t
             :skip-verbatim? #t)
          (make-ul headings 1 '() (lambda (_ ul) (list ul))))
        ))))

;; Copied from wiliki and modified.
;; The issue here is that this procedure has to recognize include form.
;; It strongly suggest that 'include' shouldn't be a normal macro---rather,
;; it has to be a markup.  I haven't decided how WiLiKi should handle this.
;; So I keep a copy locally for the time being --SK

(define (page-lines-fold page proc seed . keys)
  (let-keywords* keys ((follow-includes? #f)
                       (skip-verbatim? #f))

    (define (content-fold line seed)
      (cond ((eof-object? line) seed)
            ((string=? line "{{{") (verb-fold line seed))
            ((and follow-includes?
                  (#/##(\(include .*)/ line))
             => (lambda (m)
                  (let* ((s (open-input-string (m 1)))
                         (expr (read s)))
                    ;; NB: we ignore the rest of macros.  dont' write
                    ;; two ##(include)'s in one lnie.
                    (if (null? (cdr expr))
                      (content-fold (read-line) seed)
                      (handle-include (x->string (cadr expr)) seed)))))
            (else (content-fold (read-line) (proc line seed)))))

    (define (handle-include pagename seed)
      (let1 page (get-page (canon-pagename pagename))
        (content-fold (read-line)
                      (if page
                        (handle-page page seed)
                        seed))))

    (define (handle-page page seed)
      (if (or (not (is-a? page <wiliki-page>))
              (not (string? (ref page 'content))))
        seed
        (with-input-from-string (ref page 'content)
          (cut with-port-locking (current-input-port)
               (cut content-fold (read-line) seed)))))

    (define (verb-fold line seed)
      (cond ((eof-object? line) seed)
            ((string=? line "}}}")
             (content-fold (read-line)
                           (if skip-verbatim? seed (proc line seed))))
            (else
             (verb-fold (read-line)
                        (if skip-verbatim? seed (proc line seed))))))

    (handle-page page seed)))

;;-----------------------------------------------------------------
;; simple-comment-form
;;
(define-wiki-macro (simple-comment-form comment-name . rargs)
  (define (comment-key comment-name page)
    (format "~a(~a)-~a" (slot-ref page 'title)
	    (slot-ref page 'persistent-id) comment-name))

  (define (commit-comment-entry page key do-mail)
    (entry-lambda (:keyword author contents)
      (let ((author (string-trim-both author))
	    (contents (string-trim-both contents)))
	;; Should be verified
	(unless (invalid-comment? author contents (kahua-context-ref "x-kahua-remote-addr"))
	  (let ((set (or (find-kahua-instance <simple-comment-set> key)
			 (make <simple-comment-set> :name key)))
		(comment (make <simple-comment>
			   :author author :contents contents)))
	    (push! (ref set 'comments) comment)
	    (when do-mail (do-mail page comment)))))
      (redirect-to page)))

  (define (delete-comments-entry page)
    (entry-lambda (:mvkeyword delete-comments)
      (for-each (lambda (id)
		  (and-let* ((c (kahua-instance <simple-comment> (x->integer id))))
		    (slot-set! c 'visible #f)))
		delete-comments)
      (redirect-to page)))

  (define (comment-list page key)
    (define make-comment-header
      (if (kahua-authorized? 'admin)
	  (lambda (c)
	    `(div (@ (class "comment-header"))
		 ,(slot-ref c 'author) ": (" ,(sys-ctime (slot-ref c 'date)) ")"
		 (& "nbsp") (& "nbsp")
		 ,(make-checkbox "delete-comments" (kahua-persistent-id c) "Delete" #f)))
	  (lambda (c)
	    `(div (@ (class "comment-header"))
		 ,(slot-ref c 'author) ": (" ,(sys-ctime (slot-ref c 'date)) ")"))))
    (define (make-comment-body c)
      `(div (@ (class "comment-contents"))
	    ,@(wiliki:format-content
	       (string-append "{{{\n" (or (slot-ref c 'contents) "") "\n}}}"))))
    (or (and-let* ((comments (find-kahua-instance <simple-comment-set> 'name key))
		   (ls (filter-map (lambda (c)
				     (and c (visible? c)
					  `(div (@ (class "comment"))
						,(make-comment-header c)
						,(make-comment-body c))))
				   (reverse (slot-ref comments 'comments))))
		   ((pair? ls)))
	  (if (kahua-authorized? 'admin)
	      `((form/cont (@@ (cont ,(delete-comments-entry page)))
			   ,@ls ,(make-submit "Delete checked comment(s)")))
	      ls))
	'((p "There is no comment."))))

  (define (notice-mail mail-to mail-from page comment)
    (sendmail mail-to (or mail-from *kahua-web-email*)
	      "A comment is posted"
	      (string-append
	       (format "Author:  ~a\n" (slot-ref comment 'author))
	       (format "IP Addr: ~a\n" (kahua-context-ref "x-kahua-remote-addr"))
	       (format "URL:     ~a\n"
		       (apply kahua-self-uri-full
			      "show" (map uri-encode-string
					  (pagename-split (slot-ref page 'key)))))
	       "Contents:\n" (slot-ref comment 'contents) "\n")))

  ;; main
  (let-keywords* (cond ((null? rargs) '())
		       ((keyword? (car rargs)) rargs)
		       (else (cons :page-name rargs)))
      ((page-name #f)
       (mail-to #f)
       (mail-from #f))
    (or (and-let* ((page (if page-name
			     (get-page page-name)
			     (current-page)))
		   (key (comment-key comment-name page))
		   (starting-page (get-starting-page page)))
	  `((div (@ (class "simplecommentmacro"))
		 (div (@ (class "commentform"))
		      (form/cont 
		       (@@ (cont
			    ,(commit-comment-entry
			      starting-page key
			      (and mail-to (cut notice-mail mail-to mail-from <> <>)))))
		       (div "Name: " ,(make-textbox "author" '(size 20) '(maxlength 20)))
		       (div "Comment: " ,(make-textarea "contents" #f '(cols 70) '(rows 3)))
		       (div ,(make-submit "Submit a comment"))))
		 (div (@ (class "comments"))
		      ,@(comment-list starting-page key)))))
	'())
    ))

;; for backward compatibility
(define-wiki-macro simple-comment-form-bis simple-comment-form)

(define (keyword-args* kargs kw)
  (if (and (pair? kargs) (not (keyword? (car kargs))))
      (cons kw kargs)
      kargs))

;; rss-date
(define-wiki-macro (rss-date uri . kargs)
  (define (rss-format item)
    (let-optionals* item ((date #f)
			  (title #f)	; ignore
			  (link #f))
      `(span "(" (a (@ (href ,link)) ,(date->string date "~Y-~m-~d")) ")")))
  (apply rss-include uri :tmpbase (kahua-tmpbase)
			 :formatter rss-format
			 (keyword-args* kargs :count)))

;; rss-title
(define-wiki-macro (rss-title uri . kargs)
  (define (rss-format item)
    (let-optionals* item
	((date #f)
	 (title #f)
	 (link #f))
      `(div  (a (@ (href ,link)) ,(date->string date "~Y-~m-~d") " " ,title))))
  (apply rss-include uri :tmpbase (kahua-tmpbase)
			 :formatter rss-format
			 (keyword-args* kargs :count)))

;; rss-include
(define-wiki-macro (rss-include uri . kargs)
  (define (proc-content content)
    (cond ((string? content)
	   (guard (e (else (list content)))
	     (sxml:content (call-with-input-string content (cut ssax:xml->sxml <> '())))))
	  ((list? content)
	   (if (and (pair? content) (symbol? (car content)))
	       (list content)
	       content))
	  (else (error "descript must be string or list but got: " content))))
  (define (rss-format item)
    (let-optionals* item
	((date #f)
	 (title #f)
	 (link #f)
	 (content #f)
	 (author #f)
	 (comments #f))
      `(div (@ (class "rss-include-entry"))
	    (div (@ (class "rss-entry-body"))
		 (h3 (a (@ (href ,link)) ,(date->string date "~Y-~m-~d") " " ,title))
		 ,@(proc-content content))
	    (div (@ (class "rss-entry-footer"))
		 ,@(if author
		       `((hr) "by" (& "nbsp") ,author)
		       '())
		 ,@(if comments
		       `((& "nbsp") "|" (& "nbsp")
			 (a (@ (href ,comments)) "Comments"))
		       '()))
	    (hr))))
  (apply rss-include uri :tmpbase (kahua-tmpbase)
			 :formatter rss-format
			 (keyword-args* kargs :count)))

;; lingr badge
(define-wiki-macro (lingr-badge uri)
  `((script (@ (type "text/javascript")
	       (src ,#`",|uri|/badge/render")
	       (charset "utf-8")))))

;; youtube
(define-wiki-macro (youtube uri)
  (receive (scm uinfo host port path query frag) (uri-parse uri)
    (let* ((param-list (cgi-parse-parameters :query-string query))
	   (video-list (assoc-ref param-list "v"))
	   (video-id (and (pair? video-list) (car video-list))))
    `((object (@ (width "425")
		(height "350"))
	     (param (@ (name "movie")
		       (value ,#`"http://www.youtube.com/v/,|video-id|")))
	     (param (@ (name "wmode")
		       (value "transparent")))
	     (embed (@ (src ,#`"http://www.youtube.com/v/,|video-id|")
		       (type "application/x-shockwave-flash")
		       (wmode "transparent")
		       (width "425")
		       (height "350"))))))))

;; footnote

(define-wiki-macro (footnote text)
  `((sup (a (@ (href "#") (class "footnotelink") (title ,text)) ,text))))
