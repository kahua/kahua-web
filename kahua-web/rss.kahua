;;-*- mode: kahua; coding: utf-8 -*-
;; Kahua website macro handling
;;
;;  Copyright (c) 2004-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2004-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: rss.kahua,v 1.16 2007/07/04 03:53:25 bizenn Exp $

(use rfc.uri)
(use rfc.822)
(use rss-reader)
(use sxml.ssax)
(use sxml.sxpath)
(use util.match)
(use text.tree)
(use wiliki.format)

;;
;; Generate kahua-web RSS.
;;

(define (page-url page)
  (and-let* ((pd (find-kahua-instance <page-data> page)))
    (page-data-url pd)))

(define (page-data-url page-data)
  (apply kahua-self-uri-full
	 "show"
	 (or (and-let* ((pagename (slot-ref page-data 'name)))
	       (map uri-encode-string (pagename-split pagename)))
	     '())))

(define (page-data-title page-data)
  (let1 pn (base-pagename (slot-ref page-data 'name))
    (if (equal? pn "/")
	(string-append *kahua-web-title* ": Top Page")
	pn)))

(define (page-data-content page-data)
  (let1 c `((div ,@(wiliki:format-content (slot-ref page-data 'content))))
    (tree->string (interp-html c '()))))

(define (pubdate-mtime page)
  (and-let* ((pd (find-kahua-instance <page-data> page)))
    (page-data-mtime pd)))

(define (page-data-mtime page-data)
  (time->local-time-string (slot-ref page-data 'mtime)))

(define (time->local-time-string t)
  (sys-strftime "%a, %d %b %Y %H:%M:%S %z" (sys-localtime t)))

(define-entry (rss)
  (let ((entries (or (and-let* ((rc (find-kahua-instance <page-set> "recent-changes")))
		       (take* (slot-ref rc 'pages) 15))
		     '()))
	(page-data-content* (if (*rss-with-full-description*)
				(lambda (pd)
				  `((description ,(page-data-content pd))))
				(lambda _ '()))))
			      
    `((rss (@ (version "2.0"))
           (channel
            (title ,*kahua-web-title*)
            (link  ,(kahua-self-uri-full "show"))
            (description "Recent changes...")
            (lastBuildDate ,(time->local-time-string (sys-time)))
	    ,@(if (pair? entries)
		  `((pubDate ,(pubdate-mtime (car entries))))
		  '())
	    (docs "http://blogs.law.harvard.edu/tech/rss")
	    (generator ,#`",(kahua-worker-type) ,|*kahua-web-version*|")
            ,@(filter-map (lambda (e)
			    (and-let* ((pd (find-kahua-instance <page-data> e)))
			      `(item
				(title ,(page-data-title pd))
				(link ,(page-data-url pd))
				(pubDate ,(page-data-mtime pd))
				,@(page-data-content* pd))))
			  entries))))))

(define write-rss
  (cut kahua-write-static-file
       #`",(kahua-worker-type)/rss.xml" (rss) '()))

(when (find (pa$ string=? "write-rss") (kahua-app-args))
  (%kahua-web-rss-uri% (cut kahua-static-document-url #`",(kahua-worker-type)/rss.xml"))
  (add-hook! save-page-hook write-rss))

;;
;; Handling external RSS (rss-include)
;;

(define-constant *rss-fetch-interval* 600)

(define rss2.0-item-selector (sxpath '(rss channel item)))

(define-class <kahua-web:rss-cache> (<kahua-persistent-base>)
  ((uri :init-keyword :uri :allocation :persistent :index :unique)
   (content :init-keyword :content :allocation :persistent)
   (last-update :init-keyword :last-update :allocation :persistent)
   (mix? :init-keyword :mix? :init-value #f :allocation :persistent :index :any)))

(define (rss-include uri . kargs)
  (define (default-formatter item)
    (let ((date (car item))
	  (title (cadr item))
	  (link (caddr item)))
      `(div  (a (@ (href ,link)) ,(date->string date "~Y-~m-~d") " " ,title))))

  (define (fetch-rss uri tmpbase mix?)
    (let1 rss (cond ((find-kahua-instance <kahua-web:rss-cache> 'uri uri)
		     => (lambda (rss)
			  (let1 t (sys-time)
			    (when (> (- t (slot-ref rss 'last-update)) *rss-fetch-interval*)
			      (receive (_ _ sx) (rss->sxml uri tmpbase)
				(slot-set! rss 'content sx)
				(slot-set! rss 'last-update t))))
			  rss))
		    (else
		     (receive (_ _ sx) (rss->sxml uri tmpbase)
		       (make <kahua-web:rss-cache>
			 :uri uri :content sx :last-update (sys-time)))))
      (unless (eq? mix? (slot-ref rss 'mix?))
	(slot-set! rss 'mix? mix?))
      (slot-ref rss 'content)))

  (define (page->page-data page)
    (and-let* ((id (slot-ref page 'persistent-id)))
      (get-page-data-from-id id)))

  (let-keywords* kargs ((tmpbase #f)
			(count   #f)
			(mix?    #f)
			(formatter default-formatter))
    (define finish?
      (if count
	  (lambda (items cnt) (or (null? items) (>= 0 cnt)))
	  (lambda (items cnt) (null? items))))
    (define dec
      (if count
	  (cut - <> 1)
	  identity))
    (let* ((sx (fetch-rss uri tmpbase mix?))
	   (items (rss2.0-item-selector sx))
	   (rss-update-proc (or (and-let* ((p (current-page))
					   ((not (#/^\/\$admin(?:\/.+)?$/ (slot-ref p 'key))))
					   (pd (page->page-data p))
					   (mtime (slot-ref pd 'mtime)))
				  (lambda (pubdate)
				    (when (> (time->seconds (date->time-utc pubdate)) mtime)
				      (slot-set! pd 'mtime (sys-time))
				      (page-set-push-unique! (page-set:recent-changes) p)
				      (when (find (pa$ string=? "write-rss") (kahua-app-args))
					(write-rss)))))
				(lambda _ (values)))))
      (let loop ((items items)
		 (count count)
		 (accum '()))
	(if (finish? items count)
	    (reverse! accum)
	    (let* ((els (cdar items))
		   (pubdate (rfc822-date->date (assq-ref-car els 'pubDate))))
	      (rss-update-proc pubdate)
	      (loop (cdr items) (dec count)
		    (cons (formatter
			   (list pubdate
				 (assq-ref-car els 'title)
				 (assq-ref-car els 'link)
				 (assq-ref-car els 'description)
				 (assq-ref-car els 'author)
				 (assq-ref-car els 'comments)))
			  accum))))))
    ))
