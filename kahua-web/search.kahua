;;-*- mode: kahua; coding: utf-8 -*-
;; kahua-web: search
;;
;;  Copyright (c) 2004-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2004-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: search.kahua,v 1.8 2007/05/16 08:43:45 bizenn Exp $

(use wiliki.pasttime)
(use gauche.charconv)

;; search page
(define-entry (search :keyword word sort-by usepath)
  (let* ((word (ces-convert word "*JP"))
         (word-len (string-length word))
         (usepath (and usepath (ces-convert usepath "*JP"))))

    (define (find-all context word)

      (define (highlight line)
          (let ((idx (string-contains-ci line word)))
            (if idx
                (node-set: (string-take line idx)
                           (span: (@: (class "highlight"))
                                  (substring/shared line idx (+ idx word-len)))
                           (highlight
                            (string-drop line (+ idx word-len))))
              (node-set: line "\n"))))
      (define (iter list acc)
        (if (<= (length list) 1)
            (reverse acc)
          (if (string-contains-ci (cadr list) word)
              (iter (cddr list)
                    (cons
                     (pre:
                      (apply node-set:
                             (map highlight
                                  (take* list 3))))
                     acc))
            (iter (cdr list) acc))))

      (iter (cons "" (call-with-input-string context port->string-list)) '()))

    (define (search-result)

      (define (sorter x y)
        (> (ref x 'mtime) (ref y 'mtime)))
      (define (in-content-or-name? page)
        (or (string-contains-ci (ref page 'content) word)
            (string-contains-ci (ref page 'name) word)))
      (define (make-link path)
        `(a/cont (@@ (cont ,show ,@(pagename-split path)))
                 ,path))

      (if (< 1 word-len)
          (let* ((pages (sort
			 (filter
			  in-content-or-name?
			  (filter (if usepath
				      (lambda (page)
					(string-prefix? usepath (ref page 'name)))
				      identity)
				  (all-page-data)))
			 sorter)))
	    (div:
	     (h2: (format "search key: ~a (~a pages)\n" word (length pages)))
	     (node-list-to-node-set
	      (map (lambda (page)
		     (let ((content (ref page 'content)))
                       (div: (h4: (make-link (ref page 'name))
				  (format " (~a ago)" (how-long-since (ref page 'mtime))))
                             (blockquote: (node-list-to-node-set
                                           (if (string-contains-ci content word)
                                               (find-all content word)
					       '()))))))
		   pages))))
	  (h2: "Keyword is too short: " word)))

    (standard-page
     (make <page> :title "Search Result" :key "/Search"
           :content (search-result)))))
