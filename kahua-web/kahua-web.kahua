;;-*- mode: kahua; coding: utf-8 -*-
;; Kahua website
;;
;;  Copyright (c) 2004-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2004-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: kahua-web.kahua,v 1.77 2007/06/04 09:54:50 bizenn Exp $

(use srfi-1)
(use srfi-2)
(use srfi-13)
(use file.util)
(use util.list)
(use rfc.uri)
(use gauche.logger)
(use gauche.sequence)
(use gauche.parameter)
(use gauche.hook)
(use gauche.threads)
(use wiliki.format)
(if (global-variable-bound? (current-module) 'wiliki:current-page)
    (define wiliki-current-page wiliki:current-page)
    (eval '(use wiliki.page) (current-module)))
(use wiliki.log)
(use history)

(use rss-reader)

(log-open (kahua-logpath "kahua-web.log"))

(define save-page-hook (make-hook))
(define %kahua-web-rss-uri% (make-parameter  (cut kahua-self-uri-full "rss")))
(define (kahua-web-rss-uri)
  ((%kahua-web-rss-uri%)))
(define kahua-web-charset (gauche-character-encoding))
;; Set Account Number
(define *google-analytics-tracking* (make-parameter #f))

(load "kahua-web/version.kahua")
(load "kahua-web/macro.kahua")
(load "kahua-web/login.kahua")
(load "kahua-web/upload.kahua")
(load "kahua-web/search.kahua")
(load "kahua-web/comment.kahua")
(load "kahua-web/rss.kahua")
(load "kahua-web/history.kahua")
(load "kahua-web/local.kahua")

(define-syntax define-if-not-bound
  (syntax-rules ()
    ((_ var expr)
     (define var (if (global-variable-bound? (current-module) 'var) var expr)))))

(define-if-not-bound *kahua-web-title*
  "kahua-web")

(define-if-not-bound *kahua-web-email*
  "kahua-web@example.org")

;; Initialization for history file of WiLiKi module.
(define-constant *history-file* "wikidata.log")
(history-file (delay (cond ((and (slot-exists? (kahua-config) 'data-directory)
				 (file-is-directory? (kahua-data-directory)))
			    (make-directory* (kahua-datapath "kahua-web"))
			    (kahua-datapath "kahua-web" *history-file*))
			   ((and-let* ((db (current-db))
				       ((slot-exists? db 'real-path)))
			      (build-path (slot-ref db 'real-path) *history-file*)))
			   (else
			    (let1 d (build-path (kahua-database-directory) "kahua-web")
			      (make-directory* d)
			      (build-path d *history-file*))))))

;;========================================================
;; Application error handling
;;
;;   An error that causes a normal occasion (e.g. input error)
;;   can be thrown by <kahua-web-error> object.
;;   The <error> would be considered as a program error.

(define-condition-type <kahua-web-error> <exception> kahua-web-error?
  (form form-of))

(define (kahua-web-error form)
  (error <kahua-web-error> :form form))

;;========================================================
;; Page-data
;;

;; NB: there's no way to delete a <page-data>.  A 'deleted' pages
;; will be marked as "hidden".

(define-class <page-data> (<kahua-persistent-base>)
  ((name       :allocation :persistent :init-keyword :name)
   (content    :allocation :persistent :init-keyword :content
               :init-value "")
   (ctime      :allocation :persistent :init-keyword :ctime
               :init-form (sys-time))
   (cuser      :allocation :persistent :init-keyword :cuser
               :init-value #f)
   (mtime      :allocation :persistent :init-keyword :mtime
               :init-value #f)
   (muser      :allocation :persistent :init-keyword :muser
               :init-value #f)
   (hidden     :allocation :persistent :init-keyword :hidden
               :init-value #f)
   ))

;; [<page-data>]
(define (all-page-data)
  (filter (lambda (x) (not (ref x 'hidden)))
          (make-kahua-collection <page-data>)))

;; pagename -> Maybe <page-data>
;; pagename must be canonicalized.
(define (get-page-data pagename)
  (find (lambda (p) (equal? (ref p 'name) pagename)) (all-page-data)))

(define (page-data-exists? pagename)
  (not (not (get-page-data pagename)))) ;; for now

(define (get-page-data-from-id id)
  (find-kahua-instance <page-data> id))

(define-method pagename<? ((a <page-data>) (b <page-data>))
  (string<? (ref a 'name) (ref b 'name)))

;;========================================================
;; Page
;;

;; <page> class is used to represent any "displayable" pages, including
;; procedurally constructed page.
;; For the page that has persistent <page-data>, persistent-id slot
;; containts <page-data>'s id.
(define-class <page> (<wiliki-page>)
  ((persistent-id :init-keyword :persistent-id :init-value #f)
   (virtual-pages :allocation :class :init-value '())))

(define (persistent-page? page)
  (and (is-a? page <page>) (ref page 'persistent-id)))

(define (add-virtual-page! pagename proc)
  (class-slot-set! <page> 'virtual-pages
                   (assoc-set! (class-slot-ref <page> 'virtual-pages)
                               pagename proc)))

(define (lookup-virtual-page pagename)
  (assoc-ref (class-slot-ref <page> 'virtual-pages) pagename))

;; current page
;; NB: this is different from wiliki:current-page, which contains
;; the page being currently formatted.  This current-page keeps
;; the "toplevel" page to be shown.
(define current-page (make-parameter #f))

;; <page-data> -> <page>
(define (page-data->page data)
  (make <page>
    :title (base-pagename (ref data 'name))
    :key   (ref data 'name)  :persistent-id (key-of data)
    :content (ref data 'content)
    :ctime (ref data 'ctime) :cuser (ref data 'cuser)
    :mtime (ref data 'mtime) :muser (ref data 'muser)))

;; pagename -> Maybe <page>
;; pagename must be canonicalized.
(define (get-page pagename)
  (cond ((not pagename) #f) ;; for safety
        ((lookup-virtual-page pagename) => (cut <> pagename))
        ((get-page-data pagename) => page-data->page)
        (else #f)))

;; save page.
(define (save-page page cont comment)
  (define (get-page-data/check id)
    (let* ((data (get-page-data-from-id id))
           (newname (ref page 'key))
           (oldname (ref data 'name)))
      (unless (equal? oldname newname)
        ;; page name is changed.  make sure it doesn't conflict.
        (let1 other (get-page-data newname)
          (when (and other (not (equal? (kahua-persistent-id data) (kahua-persistent-id other))))
            (set! (ref page 'key) oldname)
            (kahua-web-error (duplicated-page-name newname))))
        (set! (ref data 'name) newname))
      data))
  (define (get-new-page/check name)
    (let1 other (get-page-data name)
      (when other (kahua-web-error (duplicated-page-name name)))
      (make <page-data> :name (ref page 'key))))
  (define (duplicated-page-name name)
    (edit-page page
               `(p (@ (class "warning"))
                   "A page with name \"" ,name "\" already exists. "
                   "Use a different name.")))

  (if (kahua-web-authorized?)
      (let ((data (cond ((ref page 'persistent-id) => get-page-data/check)
                        (else (get-new-page/check (ref page 'key)))))
            (new-content (ref page 'content)))
        (when (ref page 'persistent-id)
          (write-log (ref page 'persistent-id)
                     (ref data 'content)
                     new-content
                     (or comment "")
                     (kahua-current-user-name)))
        (set! (ref data 'content) new-content)
        (unless (ref page 'persistent-id)
          (set! (ref data 'cuser) (kahua-current-user-name)))
        (set! (ref data 'mtime) (sys-time))
        (set! (ref data 'muser) (kahua-current-user-name))
        (kahua-db-sync)
        (if (ref page 'persistent-id)
            (cont page)
            (cont (page-data->page (get-page-data (ref page 'key))))))
      (let1 epage (make-error-page "Error: Not login"
				   `(p (@ (class "warning"))
				       "To edit a page you have to login!"))
	(standard-page epage))))

(define (front-page? page)
  (equal? (ref page 'key) "/"))

;;========================================================
;; Page set
;;

(define-class <page-set> (<kahua-persistent-base>)
  ((name       :init-keyword :name :init-value #f
               :allocation :persistent)
   (max-pages  :init-keyword :max-pages :init-value #f
               :allocation :persistent)
   (pages      :init-keyword :pages :init-value '()
               :allocation :persistent)
   ))

(define-method key-of ((self <page-set>))
  (x->string (ref self 'name)))

;; assume pagename is canonicalized
(define-method page-set-push-unique! ((self <page-set>) (page <page>))
  (let1 lis (cons (ref page 'persistent-id)
                  (remove (cut equal? (ref page 'persistent-id) <>)
                          (ref self 'pages)))
    (set! (ref self 'pages)
          (cond ((ref self 'max-pages) => (cut take* lis <>))
                (else lis)))))

;; (String, Bool=#f, MaxPages=#f) -> <page-set>
;; second arg specifies whether it should create a new page set if
;; the named one doesn't exist.
(define (get-page-set page-set-name . opts)
  (let-optionals* opts ((create? #f) (maxpages #f))
    (or (find-kahua-instance <page-set> page-set-name)
        (and create?
             (make <page-set>
               :name page-set-name
               :max-pages maxpages)))))

;; Default page sets.  recent-changes and news
(define (page-set:recent-changes) (get-page-set "recent-changes" #t 50))
(define (page-set:news)           (get-page-set "news" #t 50))

;;========================================================
;; Page paths
;;

;; Kahua-web's pages can be constructed in hierarchy.
;; Each page has a name beginning with "/", and have similar
;; structure like pathnames.
;; Within the page, wikiname can refer to the other pages
;; by "relative pathname".
;;
;; Note that the page is not a "directory"---there's no real
;; container in the database, but only a conceptual group of
;; names.   An unqualified name refers to the page in the
;; same conceptual directory---that is, "baz" in the page
;; "/foo/bar" means "/foo/baz", not "/foo/bar/baz".
;;
;; The pathname component "." and ".." can be used to point relative
;; names.  Note that these also works from the conceptual directory
;; where the page is in, so "./baz" in the page "/foo/bar" is
;; "/foo/baz", and "../baz" in the page "/foo/bar" is "/baz".
;;
;; A special name "$" refers to the page itself.  So "$/baz" in the
;; page "/foo/bar" means "/foo/bar/baz".
;;
;; The name of the top page is "/".
;; The "parent" page of the top page is the top page itself.
;; That is, "/a/../.." refers to "/", and "/a/../../b" refers to "/b".

(define (bottom-hierarchy path)
  (let1 spath (simplify-page-path path)
    (last
     (string-split
      (if (string=? "/" (string-take-right spath 1))
          (string-drop-right spath 1)
          spath) #\/))))

(define (upper-hierarchy path)
  (let* ((spath (simplify-page-path path))
         (uhier
          (string-join
           (drop-right*
            (string-split
             (if (string=? "/" (string-take-right spath 1))
                 (string-drop-right spath 1)
                 spath) #\/) 1) "/")))
    (if (string-null? uhier) "/" uhier)))

(define (absolute-page-path? path)
  (string-prefix? "/" path))

(define (simplify-page-path path)
  (define (cancel-top xs)
    (if (null? xs) xs (cdr xs)))
  (define (iter ac xxs)
    (if (null? xxs)
        (reverse ac)
        (receive (x xs)
                 (car+cdr xxs)
                 (cond ((string=? x ".") (iter ac xs))
                       ((string=? x "..") (let1 new-ac (cancel-top ac)
                                            (if (null? new-ac)
                                                (append ac xxs)
                                                (iter new-ac xs))))
                       (else (iter (cons x ac) xs))))))
  (let ((hd (if (char=? #\/ (string-ref path 0)) "/" ""))
        (tl (if (char=? #\/ (string-ref path (- (string-length path) 1)))
                "/" "")))
    (string-append hd 
                   (string-join
                    (iter '()
                          (filter (compose not string-null?)
                                  (string-split path #\/))) "/")
                   tl)))

;; Get canonical (absolute) pathname of the page.
;; Returns #f if pagename is invalid.
(define (canon-pagename pagename . current)
  (define (fix-up path) ;; strips leading "/.."
    (cond ((string-null? path) "/")
          ((string-prefix? "/.." path) (fix-up (string-drop path 3)))
          ((string-suffix? "/" path) (string-drop-right path 1))
          (else path)))
  (define (canon-path path . more-paths)
    (fix-up (simplify-page-path (apply build-path path more-paths))))
  (if (absolute-page-path? pagename)
    (canon-path pagename)
    (and-let* ((curpage (get-optional current
                                      (cond ((current-page)
                                             => (cut ref <> 'key))
                                            (else #f)))))
      (cond ((equal? pagename "$") curpage)
            ((string-prefix? "$/" pagename)
             (canon-path curpage (string-drop pagename 2)))
            (else
             (canon-path (upper-hierarchy curpage) pagename))))))

;; Base name to be used for display
;;  NB: it is arguable that whether we should display the pathname
;;  component if the pointed page is in different "directory".
;;  For now, I just take the basename (except the "/").
(define (base-pagename pagename)
  (if (equal? pagename "/") "/" (bottom-hierarchy pagename)))

;; "/aa/bb/cc" -> '("aa" "bb" "cc")
;; "/" -> '()
(define (pagename-split pagename . opts)
  (let1 c (canon-pagename pagename)
    (and c (if (or (string-null? c) (string=? c "/"))
             '()
             (string-split (string-drop c 1) #\/)))))

;; '("aa" "bb" "cc") => "/aa/bb/cc"
;; '() => "/"
(define (pagename-join components)
  (string-append "/" (string-join components "/")))

;; Formatting wikiname.
(define (format-wikiname name)
  (receive (path linkname) (string-scan name "//" 'both)
    (let ((absname  (canon-pagename (or path name)))
          (linkname (or linkname (base-pagename name))))
      (if absname
        (if (or (lookup-virtual-page absname)
                (page-data-exists? absname))
          `((a/cont (@@ (cont ,show ,@(pagename-split absname)))
                    ,linkname))
          `(,linkname
            (a/cont (@@ (cont ,edit ,@(pagename-split absname)))
                    "?")))
        (list #`"[[,name]]")))))

;;========================================================
;; Page formatters
;;

;; +---------------------------------------------------+
;; |navigation-pane                  [login]  [search] |
;; +---------------------------------------------------+
;; |title-pane    Page Title                           |
;; +---------------------------------------------------+
;; |side-pane |   contents...                          |
;; |          |                                        |
;; |          |                                        |
;; |          |                                        |
;; :          :                                        :
;; |          |                                        |
;; +---------------------------------------------------+
;; |                   bottom-pane                     |
;; +---------------------------------------------------+

(define standard-page-template
  (kahua:make-xml-template
   (kahua-template-path "kahua-web" "standard-page.xml")))

(define (standard-page page)

  (define (fmt-time t)
    (sys-strftime "%Y/%m/%d %H:%M:%S" (sys-localtime t)))
  
  (define (footer page)
    `((div (@ (id "page-footer"))
           ,@(cond-list
              ((ref page 'ctime)
               => (lambda (t) (format "Created: ~a" (fmt-time t))))
              ((ref page 'cuser) => (cut format " by ~a" <>))
              (#t '(br))
              ((ref page 'mtime)
               => (lambda (t) (format "Modified: ~a" (fmt-time t))))
              ((ref page 'muser) => (cut format " by ~a" <>))))))

  (define (edit-menu page)
    (if (kahua-web-authorized?)
	(let1 path (pagename-split (ref page 'key))
	  `((div (@ (id "edit-menu"))
		 (a/cont (@@ (cont ,edit ,@path)) "[Edit]")
		 (a/cont (@@ (cont ,history ,@path)) "[History]"))))
	'()))

  (parameterize ((current-page page))
    (kahua:xml-template->sxml
     standard-page-template
     :title (title/ (string-join (reverse (pagename-split (slot-ref page 'key))) " | " 'suffix)
		    *kahua-web-title*)
     ;; FIXME!!
     :extra-header-elements (if (slot-exists? page 'extra-head-elements)
				(let1 els (slot-ref page 'extra-head-elements)
				  (if (null? els)
				      '(node-set)
				      els))
				'(node-set))
     :rss-link (link/ (@/ (rel "alternate") (type "application/rss+xml")
			  (title (string-append *kahua-web-title* " RSS"))
			  (href (kahua-web-rss-uri))))
     :style-link
     (node-set/ (link/ (@/ (rel "stylesheet") (type "text/css")
			   (href (kahua-static-document-url "kahua-web" "kahua-web.css"))))
		(link/ (@/ (rel "stylesheet") (type "text/css")
			   (href (kahua-static-document-url "kahua-web" "kahua-web-local.css")))))
     :title-pane-contents
     (h1/ (if (front-page? page)
	      *kahua-web-title*
	      (slot-ref page 'title)))
     :navigation-pane-contents (page-navigation page)
     :side-pane-contents (use-page "/$admin/side-pane")
     :bottom-pane-contents (use-page "/$admin/bottom-pane")
     :access-tracker (google-analytics-tracker/)
     :main-pane `((div (@ (id "main-pane"))
		       ,@(if (persistent-page? page) (edit-menu page) '())
		       ,@(wiliki:format-content page)
		       ,@(if (persistent-page? page) (footer page) '())))
     )))

(define (page-navigation page)
  ;; ("/" "a" "b") => (() ("a") ("a" "b"))
  (define (navi-paths pathl)
    (map-with-index (lambda (ind _) (take pathl ind)) (cons #f pathl)))
  ;; "/a/b" => ["Home" ">" "a" ">" "b"] with appropriate links
  (define (navi-links pathl)
    (intersperse " > "
                 (map (lambda (paths name)
                        (if (get-page (pagename-join paths))
                          `(a/cont (@@ (cont ,show ,@paths)) ,name)
                          name))
                      (navi-paths pathl)
                      (cons "Home" pathl))))
  ;; 
  (define (navigation-right)
    `(form/cont 
      (@@ (cont ,search)) (@ (class "search"))
      ,@(login-link) " " ,(make-submit "Search:") ,(make-textbox "word" '(size 10))))
  ;; body
  `((table
     (tr (td (@ (id "navigation-pane-left"))
             ,@(navi-links (pagename-split (ref page 'key))))
         (td (@ (id "navigation-pane-right"))
	     ,(navigation-right))))))

(define (get-source page-path)
  (or
   (and-let* ((page (get-page page-path))
	      (content (ref page 'content)))
     (if (pair? content)
	 (format "{{{\n~a\n}}}\n" content)
	 (string-concatenate 
	  (map (lambda (line) (format " ~a\n" line))
	       (string-split (ref page 'content) "\n")))))
   (format "* No Such Page: ~a" page-path)))

(define-entry (source :rest page-name)
  (let ((page-path (pagename-join page-name)))
    (standard-page
     (make <page> :title (format "Source of ~a" page-path)
	          :key   (format "/Source/~a" page-path)
                  :content (get-source page-path)))))

(define (redirect-to entry-name . args)
  `((html (extra-header (@ (name "Status") (value "302 Found")))
	  (extra-header (@ (name "Location")
			   (value ,(apply kahua-self-uri-full entry-name args)))))))

(define-method redirect-to ((page <page>))
  (apply redirect-to "show" (map uri-encode-string
				 (pagename-split (slot-ref page 'key)))))

(define-method redirect-to ((page <boolean>))
  (redirect-to (get-page "/")))

(define (format-time t)
    (sys-strftime "%Y/%m/%d %H:%M:%S" (sys-localtime t)))

(let ((formatter (wiliki:formatter)))
  (set! (ref formatter 'bracket) format-wikiname)
  (set! (ref formatter 'macro) format-macro)
  (set! (ref formatter 'time) format-time)
  )

;; A common routine to format a customizable pane
(define (use-page pagename)
  (cond ((get-page pagename) => wiliki:format-content)
        (else (format-wikiname pagename))))

;;========================================================
;; Main application
;;

(define-entry (show :rest page-path)
  (let ((pagename (pagename-join page-path)))
    (cond ((get-page pagename) => standard-page)
	  ((equal? "/" pagename)
	   (standard-page (make <page>
			    :title "Top Page"
			    :key "/" :content (format-wikiname "/"))))
          (else (standard-page (make-nonexistent-page pagename))))))

;; assumes pagename is canonicalized
(define (make-nonexistent-page pagename)
  (make-error-page "Error: nonexistent page"
                   `(p "ページ" ,pagename "は存在しません")))

(define (make-error-page title body)
  (make <page> :title title :key "/Error" :content body))

(define (error-proc exc)
  (if (kahua-web-error? exc)
      (ref exc 'form)
      (standard-page
       (make-error-page "Error: program error"
			`(,@(use-page "/$admin/program-error")
			  (pre ,(kahua-error-string exc (kahua-current-user))))))))

(define-entry (edit :rest page-path)
  (let ((pagename (pagename-join page-path)))
    (cond ((get-page pagename) => edit-page)
          (else (edit-page (make <page> :title pagename :key pagename))))))

(define (edit-page page . extra-contents)
  (define commit
    (entry-lambda (:keyword content donttouch addtonews
                            changename confirmchange comment)
      (slot-set! page 'content (canon-content content))
      (and-let* (((equal? confirmchange "on"))
                 (newname (canon-pagename changename)))
        (slot-set! page 'key newname))
      (save-page page
                 (lambda (page)
                   (unless (equal? donttouch "on")
                     (page-set-push-unique! (page-set:recent-changes) page))
                   (when (equal? addtonews "on")
                     (page-set-push-unique! (page-set:news) page))
		   (run-hook save-page-hook)
                   (redirect-to page))
                 comment)))
  (with-kahua-web-authorization
   (lambda ()
     (let* ((admin-page? (#/^\/\$admin(?:\/.+)?$/ (slot-ref page 'key)))
	    (epage (make <page>
		     :title #`"Editing ,(ref page 'title)" :key (ref page 'key)
		     :content
		     `(,@extra-contents
		       (div
			(form/cont
			 (@@ (cont ,commit (donttouch) (content)))
			 (@ (class "page-editor"))
			 (textarea (@ (name "content") (rows 30) (cols 80))
				   ,(ref page 'content))
			 (br)
			 (div (@ (class "edit-inputs"))
			      (input (@ (type "submit") (name "commit")
					(value "Commit")))
			      " "
			      (div "log message : "
				   (input (@ (type "text")
					     (name "comment")
					     (size 30) (value ""))))
			      " "
			      (input (@ (type "checkbox") (name "donttouch")
					(value "on") (id "donttouch")
					,@(if admin-page? '((checked "checked")) '())))
			      (label (@ (for "donttouch"))
				     "Don't update 'Recent Changes'")
			      " "
			      (input (@ (type "checkbox") (name "addtonews")
					(value "on") (id "addtonews")))
			      (label (@ (for "addtonews")) "Add to news item")
			      (br)
			      "Change Page Name : "
			      (input (@ (type "entry") (name "changename") (width 20)
					(value ,(ref page 'key))))
			      " "
			      (input (@ (type "checkbox") (name "confirmchange")
					(value "on") (id "confirmchange")))
			      (label (@ (for "confirmchange")) "I'm sure"))
			 (br)
			 (div (@ (class "edit-help"))
			      ,@(use-page "/$admin/edit-help"))
			 
			 ))))))
       (standard-page epage)))))

;; display version
(define-entry (version)
  (with-kahua-web-authorization
   (lambda ()
     (let* ((content `((table
			(@ (class "version-info"))
			(tr (th "Kahua-Web version: ") (td ,*kahua-web-version*))
			(tr (th "Kahua version:") (td ,(kahua-version)))
			(tr (th "Gauche version:")
			    (td ,(gauche-version)
				" ["
				,(symbol->string (gauche-character-encoding))
				","
				,(symbol->string (gauche-thread-type))
				"]")))))
	    (vpage (make <page> :title "Kahua-Web version"
			 :key "/Version" :content content)))
       (standard-page vpage)))))

;; canonicalize EOL to #\newline
(define (canon-content content)
  (string-join (call-with-input-string content port->string-list)
               "\n" 'suffix))

;; Support for Google Analytics Tracking
(define (google-analytics-tracker/)
  (when/ (*google-analytics-tracking*)
    (node-set/
     (script/ (@/ (src "http://www.google-analytics.com/urchin.js")
		  (type "text/javascript")))
     (script/ (@/ (type "text/javascript"))
	      #`"_uacct=\",(*google-analytics-tracking*)\";\n"
	      "urchinTracker();"))))

;;========================================================
;; initialization
;;
   
(initialize-main-proc show)

(kahua-error-proc error-proc)
