;;-*- mode: kahua; coding: utf-8 -*-
;; Kahua website
;;
;;  Copyright (c) 2004-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2004-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: login.kahua,v 1.10 2007/06/01 15:05:12 bizenn Exp $

(use srfi-1)

(define non-member-edit-flag
  (and-let* ((args (kahua-app-args))
	     ((pair? args)))
    (string-ci=? (car args) "non-member-edit")))

(define show-login-form
  (letrec (;; Allow anonymous login
	   (show-anon-login-form
	    (lambda (extra-contents page)
	      (define (make-login-check-entry)
		(entry-lambda (:keyword logname)
		  (cond ((kahua-find-user logname)
			 (show-normal-login-form
			  '((p (@ (class "warning"))
			       "You are registered user. Please enter password."))
			  page))
			((string-null? logname)
			 (show-anon-login-form
			  '((p (@ (class "warning"))
			       "Please enter your nickname"))
			  page))
			(else
			 (parameterize ((current-db #f))
			   (set! (kahua-current-user-name) logname))
			 (redirect-to page)))))
	      (standard-page
	       (make <page> :title "Login" :key "/"
		     :content
		     `((h2 "Login") ,@extra-contents
		       (form/cont
			(@@ (cont ,(make-login-check-entry)))
			(table
			 (@ (class "user-form"))
			 (tr (th "Nickname")
			     (td (input (@ (type "text") (name "logname")))))
			 (tr (th)
			     (td (input (@ (type "submit") (value "Login"))))))))))))
	   ;; Only normal login
	   (show-normal-login-form
	    (lambda (extra-contents page)
	      (define (make-login-check-entry)
		(entry-lambda (:keyword logname pass)
		  (if (kahua-login logname pass)
		      (redirect-to page)
		      (show-normal-login-form
		       '((p (@ (class "warning"))
			    "Username or password does not match.  Try again."))
		       page))))
	      (standard-page
	       (make <page>
		 :title "Login" :key "/"
		 :content
		 `((h2 "Login")
		   ,@extra-contents
		   (form/cont
		    (@@ (cont ,(make-login-check-entry)))
		    (table
		     (@ (class "user-form"))
		     (tr (th "Username")
			 (td (input (@ (type "text") (name "logname")))))
		     (tr (th "Password")
			 (td (input (@ (type "password") (name "pass")))))
		     (tr (th)
			 (td (input (@ (type "submit") (value "Login")))))))))))))
    (if non-member-edit-flag
	show-anon-login-form
	show-normal-login-form)))

(define kahua-web-authorized?
  (if non-member-edit-flag
      (lambda roles
	(if (null? roles)
	    (and-let* ((name (kahua-current-user-name)))
	      (and (not (string-null? name))
		   name))
	    (and (apply kahua-authorized? roles)
		 (kahua-current-user-name))))
      (lambda roles
	(and (apply kahua-authorized? roles)
	     (kahua-current-user-name)))))

(define (kahua-web-current-path)
  (string-join (cons (kahua-current-entry-name)
		     (kahua-context-ref "x-kahua-path-info"))
	       "/"))

(define (with-kahua-web-authorization thunk . roles)
  (if (apply kahua-web-authorized? roles)
      (thunk)
      (show-login-form `((p (@ (class "warning"))
			    "Login required: "))
		       (kahua-web-current-path))))

(define (standard-page/auth page)
  (if (kahua-web-authorized?)
      (standard-page page)
      (show-login-form `((p (@ (class "warning"))
			    "Login required: "))
		       (kahua-web-current-path))))
             
;; login account can only be issued by "admin" role.

(define (login-link)
  (define (make-login-entry page)
    (lambda () (show-login-form '() page)))
  (define (make-logout-entry page)
    (lambda ()
      (when non-member-edit-flag
	(parameterize ((current-db #f)) (set! (kahua-current-user-name) #f)))
      (kahua-logout)
      (redirect-to page)))
  (or (and-let* ((name (kahua-current-user-name)))
	`((span (@ (class "login-link"))
		"User '" (a/cont (@@ (cont ,user-admin ,name)) ,name) "' "
		(a/cont (@@ (cont ,(make-logout-entry (kahua-web-current-path)))) "[logout]"))))
      `((span (@ (class "login-link"))
	      (a/cont (@@ (cont ,(make-login-entry (kahua-web-current-path)))) "[login]")))))

;; user info page
;;   admin role or developer role can access all user page.
;;   other users can only access his/her own page
(define-constant *developer-role* 'developer)
(define-constant *administrator-role* 'admin)
(define-constant *allowed-roles* `(,*administrator-role* ,*developer-role*))

(define-entry (user-admin logname)
  (cond ((not logname)
	 (if (kahua-authorized? *administrator-role*)
	     (user-list-page '())
	     (dont-have-priviledge-page "")))
	((kahua-find-user logname)
	 => (lambda (u)
	      (cond ((eq? u (kahua-current-user)) (self-page u '()))
		    ((kahua-authorized? *administrator-role*) (user-page u '() '()))
		    (else (dont-have-priviledge-page logname)))))
	(else (standard-page
	       (make <page>
		 :title #`"Unknown user: ,|logname|" :key "/"
		 :content `((p (@ (class "warning"))
			       "Unknown user: " ,logname)))))))

(define (self-page user extra-message)
  (define (change-pass-entry)
    (entry-lambda (:keyword oldpass newpass1 newpass2)
      (cond ((not (equal? newpass1 newpass2))
	     (self-page user '((p (@ (class "warning"))
				  (strong "New passwords don't match.")))))
	    ((not (kahua-user-password-change user oldpass newpass1))
	     (self-page user '((p (@ (class "warning"))
				  (strong "Wrong password.")))))
	    (else (self-page user '((p (strong "Password changed!!"))))))))
  (let1 logname (slot-ref user 'login-name)
    (standard-page
     (make <page>
       :title #`"User: ',logname'" :key "/"
       :content
       `(,@(if (kahua-authorized? 'admin)
	       `((div (@ (id "edit-menu"))
		      (a/cont (@@ (cont ,user-admin)) "[User List]")))
	       '())
	 (h2 "User: " ,logname)
	 (p "Role(s): " ,(string-join (map x->string (ref user 'role-alist)) ", "))
	 (h3 "Change password:")
	 (form/cont
	  (@@ (cont ,(change-pass-entry)))
	  ,@extra-message
	  (table
	   (@ (class "user-form"))
	   (tr (th "Old password:") (td ,(make-password-box "oldpass")))
	   (tr (th "New password:") (td ,(make-password-box "newpass1")))
	   (tr (th "Again new password:") (td ,(make-password-box "newpass2")))
	   (tr (th) (td ,(make-submit "Change"))))))
       ))))

(define (user-page user chpw-message chrls-message)
  (define (reset-pass-entry)
    (entry-lambda (:keyword newpass1 newpass2)
      (cond ((not (equal? newpass1 newpass2))
	     (user-page user `((p (@ (class "warning"))
				  (strong "New passwords don't match."))) '()))
	    ((kahua-user-password-change-force user newpass1)
	     (user-page user '((p (strong "Password changed!!"))) '()))
	    (else
	     (user-page user `((p (@ (class "warning"))
				  (strong "Cannot change password."))) '())))))
  (define (set-roles-entry)
    (entry-lambda (:mvkeyword roles)
      (slot-set! user 'role-alist
		 (lset-intersection eq? (map string->symbol roles) *allowed-roles*))
      (user-page user '() '((p (strong "Role(s) set"))))))
  (let ((logname (slot-ref user 'login-name))
	(uroles  (slot-ref user 'role-alist)))
    (standard-page
     (make <page>
       :title #`"User: ,|logname|" :key "/"
       :content
       `((div (@ (id "edit-menu"))
	      (a/cont (@@ (cont ,user-admin)) "[User List]"))
	 (h2 "User: " ,logname)
	 (div (@ (id "roles-change"))
	      ,@chrls-message
	      (form/cont (@@ (cont ,(set-roles-entry)))
			 (p "Role(s): "
			    ,@(map (lambda (r)
				     (let1 rstr (symbol->string r)
				       (make-checkbox "roles" rstr rstr (memq r uroles))))
				   *allowed-roles*)
			    ,(make-submit "Change"))))
	 (h3 "Change password:")
	 (div (@ (id "password-change"))
	      ,@chpw-message
	      (form/cont (@@ (cont ,(reset-pass-entry)))
			 (table
			  (@ (class "user-form"))
			  (tr (th "New password:") (td ,(make-password-box "newpass1")))
			  (tr (th "Again new password:") (td ,(make-password-box "newpass2")))
			  (tr (th) (td ,(make-submit "Change")))))))
       ))))

(define (user-list-page extra-message)
  (standard-page
   (make <page>
     :title #`"Registered Users" :key "/"
     :content
     `((h2 "Registered Users")
       (table (@ (class "user-list"))
	      (thead
	       (tr (th "Login name") (th "Roles")))
	      (tbody
	       ,@(map (lambda (u)
			`(tr (td (a/cont (@@ (cont ,user-admin ,(slot-ref u 'login-name)))
					 ,(slot-ref u 'login-name)))
			     (td ,(string-join (map symbol->string (slot-ref u 'role-alist))
					       ", "))))
		      (make-kahua-collection (kahua-current-user-class)))))))))

(define (dont-have-priviledge-page login-name)
  (standard-page
   (make <page>
     :title #`"User: ,|login-name|" :key "/"
     :content
     `((p (@ (class "warning"))
	  "You don't have a priviledge to browse this page.")))))

(define (make-password-box name)
  `(input (@ (type "password") (name ,name))))

(define (make-checkbox name value label checked?)
  `(label (input (@ (type "checkbox") (name ,name) (value ,value)
		    ,@(if checked? '((checked "checked")) '())))
	  ,label))

(define (make-submit value)
  `(input (@ (type "submit") (value ,value))))
