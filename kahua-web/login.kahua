;;-*- mode: kahua; coding: utf-8 -*-
;; Kahua website
;;
;;  Copyright (c) 2004-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2004-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: login.kahua,v 1.7 2007/05/17 14:12:44 bizenn Exp $

(define non-member-edit-flag
  (and-let* ((args (kahua-app-args))
	     ((pair? args)))
    (string-ci=? (car args) "non-member-edit")))

(define show-login-form
  (letrec (;; Allow anonymous login
	   (show-anon-login-form
	    (lambda (extra-contents page)
	      (define (make-login-check-entry)
		(entry-lambda (:keyword logname)
		  (cond ((kahua-find-user logname)
			 (show-normal-login-form
			  '((p (@ (class "warning"))
			       "You are registered user. Please enter password."))
			  page))
			((string-null? logname)
			 (show-anon-login-form
			  '((p (@ (class "warning"))
			       "Please enter your nickname"))
			  page))
			(else
			 (parameterize ((current-db #f))
			   (set! (kahua-current-user-name) logname))
			 (redirect-to (get-page (pagename-join return-page-path)))))))
	      (standard-page
	       (make <page> :title "Login" :key "/"
		     :content
		     `((h2 "Login") ,@extra-contents
		       (form/cont
			(@@ (cont ,(make-login-check-entry)))
			(table
			 (@ (class "user-form"))
			 (tr (th "Nickname")
			     (td (input (@ (type "text") (name "logname")))))
			 (tr (th)
			     (td (input (@ (type "submit") (value "Login"))))))))))))
	   ;; Only normal login
	   (show-normal-login-form
	    (lambda (extra-contents page)
	      (define (make-login-check-entry)
		(entry-lambda (:keyword logname pass)
		  (if (kahua-login logname pass)
		      (redirect-to page)
		      (show-normal-login-form
		       '((p (@ (class "warning"))
			    "Username or password does not match.  Try again."))
		       page))))
	      (standard-page
	       (make <page>
		 :title "Login" :key "/"
		 :content
		 `((h2 "Login")
		   ,@extra-contents
		   (form/cont
		    (@@ (cont ,(make-login-check-entry)))
		    (table
		     (@ (class "user-form"))
		     (tr (th "Username")
			 (td (input (@ (type "text") (name "logname")))))
		     (tr (th "Password")
			 (td (input (@ (type "password") (name "pass")))))
		     (tr (th)
			 (td (input (@ (type "submit") (value "Login")))))))))))))
    (if non-member-edit-flag
	show-anon-login-form
	show-normal-login-form)))
             
;; login account can only be issued by "admin" role.

(define (login-link)
  (define (make-login-entry page)
    (lambda () (show-login-form '() page)))
  (define (make-logout-entry page)
    (lambda ()
      (when non-member-edit-flag
	(parameterize ((current-db #f)) (set! (kahua-current-user-name) #f)))
      (kahua-logout)
      (redirect-to page)))

  (or (and-let* ((name (kahua-current-user-name)))
	`((span (@ (class "login-link"))
		"User '" (a/cont (@@ (cont ,user-admin ,name)) ,name) "' "
		(a/cont (@@ (cont ,(make-logout-entry (current-page)))) "[logout]"))))
      `((span (@ (class "login-link"))
	      (a/cont (@@ (cont ,(make-login-entry (current-page)))) "[login]")))))

;; user info page
;;   admin role or developer role can access all user page.
;;   other users can only access his/her own page
(define-entry (user-admin logname)
  (let1 user (find-kahua-instance <kahua-user> logname)
    (define (user-page extra-message)
      (standard-page
       (make <page>
         :title #`"User ',logname'" :key "/"
         :content
         `((h2 "User '",logname"'")
           (p "User " ,logname " has role(s): "
              ,(string-join (map x->string (ref user 'role-alist)) ", "))
           (h3 "Change password:")
           (form/cont
            (@@ (cont ,change-pass (oldpass) (newpass1) (newpass2)))
            ,@extra-message
            (table
             (@ (class "user-form"))
             (tr (th "Old password")
                 (td (input (@ (type "password") (name "oldpass")))))
             (tr (th "New password")
                 (td (input (@ (type "password") (name "newpass1")))))
             (tr (th "Retype new password")
                 (td (input (@ (type "password") (name "newpass2")))))
             (tr (th)
                 (td (input (@ (type "submit") (name "submit")
                               (value "Change")))))))
           ))))
    (define change-pass
      (entry-lambda (:keyword oldpass newpass1 newpass2)
        (cond ((not (equal? newpass1 newpass2))
               (user-page '((p (@ (class "warning"))
                               "New passwords don't match."))))
              ((not (kahua-user-password-change user oldpass newpass1))
               (user-page '((p (@ (class "warning"))
                               "Wrong password."))))
              (else
               (kahua-db-sync)
               (user-page '((p "Password changed.")))))))

    (if (or (kahua-user-has-role? (kahua-current-user) '(admin developer))
            (and-let* ((u (kahua-current-user)))
              (equal? logname (ref u 'login-name))))
      (user-page '())
      (standard-page
       (make <page>
         :title #`"User ,logname" :key "/"
         :content
         `((p (@ (class "warning"))
              "You don't have a priviledge to browse this page.")))))
    ))
