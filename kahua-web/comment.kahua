;;-*- mode: kahua; coding: utf-8 -*-
;; Kahua web commenting
;;
;;  Copyright (c) 2004-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2004-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: comment.kahua,v 1.13 2007/05/29 22:27:53 bizenn Exp $

(use srfi-1)
(use gauche.collection)

(define-class <simple-comment-set> (<kahua-persistent-base>)
  ((name     :allocation   :persistent 
	     :init-keyword :name
	     :init-form #f)
   (comments :allocation :persistent
	     :init-form '())
   (comment-count :allocation :persistent
		  :init-form 0))
  )

(define-method key-of ((self <simple-comment-set>))
  (x->string (ref self 'name)))

(define-class <simple-comment> (<kahua-persistent-base>)
  ((author   :allocation   :persistent
	     :init-keyword :author)
   (contents :allocation   :persistent
	     :init-keyword :contents)
   (date     :allocation   :persistent
	     :init-keyword :date
	     :init-form    (sys-time))
   (visible  :allocation   :persistent
	     :init-form    #t
	     :getter       visible?))
  )

(define (make-sf-edit-page ttl body)
  (make <page> :title ttl 
	       :content body 
               :key "/EditSimpleFormComment"))

(define-constant *uri-regexp*
  #/[[:alnum:]]+:\/\/(?:[^\/?#\s]*)?\/[^?#\s]*(?:\?[^#\s]*)?(?:#\S*)?/)
(define (invalid-comment? author contents ipaddr)
  (or (not author) (string-null? author)
      (not contents) (string-null? contents)
      (let each-line ((lines (string-split contents #[\n\r]))
		      (uri-allow 1))
	(cond ((< uri-allow 0) #t)
	      ((null? lines)   #f)
	      (else
	       (let1 l (car lines)
		 (cond ((> (string-count l #\+) 5) #t)
		       (else
			(rxmatch-case l
			  (#/<a\ / () #t)
			  (#/\[url=/ () #t)
			  (test *uri-regexp*
				=> (lambda (m)
				     (each-line (cons (m 'after) (cdr lines)) (- uri-allow 1))))
			  (else (each-line (cdr lines) uri-allow)))))))))))

(define-entry (modify-visibility-of-comment)
  (let ((sets (make-kahua-collection <simple-comment-set>))
        (epage (make-error-page
                "Error: Not login"
                `(p (@ (class "warning"))
                    "To modify visibility of a comment  you have to login!"))))
    (define (edit-set-commit set)
      (if (kahua-web-authorized?)
          (begin
            (for-each
             (lambda (c)
	       (when c
		 (let* ((val (kahua-context-ref (x->string (kahua-persistent-id c))))
			(val (if (equal? val "true") #t #f)))
		   (set! (ref c 'visible) val))))
             (ref set 'comments))
            (edit-set set))
	  (standard-page epage)))
    (define (edit-set set)
      (if (kahua-web-authorized?)
          (standard-page
           (make-sf-edit-page
            (format "Edit visibility of comment ~A" (ref set 'name))
            `(div (form/cont
                   (@@ (cont ,(lambda () (edit-set-commit set))))
                   (table (@ (border 1))
                          ,@(map (lambda (c)
				   (and c
					`(tr (td ,(ref c 'author))
					     (td ,(ref c 'contents))
					     (td (input 
						  (@ (type "checkbox") 
						     (name  ,(kahua-persistent-id c))
						     (value "true")
						     ,@(if (visible? c)
							   '((checked checked)) '())))))))
                                 (ref set 'comments)))
                   (input (@ (type "submit") (name "submit") (value "commit")))
                   ))))
	  (standard-page epage)))
    (define (edit-set-link set)
      `(a/cont (@@ (cont ,(lambda () (edit-set set))))
	       ,(x->string (ref set 'name))))
    (with-kahua-web-authorization
     (lambda ()
       (standard-page 
	(make-sf-edit-page 
	 "List of Comments"
	 (if sets
	     `(ol
	       ,@(map (lambda (set)
			`(li ,(edit-set-link set))) sets))
	     '(div "There is no comment."))))))))

(define-entry (comment-list)
  (define (comment-list-form)
    (let ((comments (sort
		     (filter
		      (lambda (c) (visible? c))
		      (make-kahua-collection <simple-comment>))
		     (lambda (x y) (> (ref x 'date) (ref y 'date)))
		     )))
      (standard-page
       (make <page> :title "Comment List" :key "/"
	     :content
	     `((h2 "コメント一覧")
	       (form/cont
		(@ (name "commentForm"))
		(@@ (cont ,check-comment-list))
		(table (@ (width "100%"))
		       (tr
			(td)
			(td (input (@ (type "submit")(name "delete-button")(value "削除")))))
		       (tr
			(td (input (@ (type "checkbox")(name "onOff")(title "全て選択")
				      (onClick "var chkd = document.commentForm.onOff.checked; for (var i=0; i<document.commentForm.commentId.length; i++) { document.commentForm.commentId[i].checked=chkd; }"))))
			(th "Date")(th "Author")(th "Contents"))
		       ,@(map
			  (lambda (c)
			    (let ((author (ref c 'author))
				  (contents (if (> (string-length (ref c 'contents)) 80)
						#`",(string-take (ref c 'contents) 80)..."
						(ref c 'contents)))
				  (date (and c (ref c 'date)
					      (sys-strftime "%Y-%m-%d %H:%M:%S"
							    (sys-localtime (ref c 'date))))))
			      `(tr
				(td (@ (title ,(or (key-of c) "")))
				    (input (@ (type "checkbox") (name "commentId") (value ,(or (key-of c) "")))))
				(td ,(or date ""))
				(td ,(or author ""))
				(td ,(or contents ""))
				)))
			  comments)
		       (tr (td)
			   (td (input (@ (type "submit")(name "delete-button")(value "削除"))))))))))))
  (define check-comment-list
     (entry-lambda (:mvkeyword commentId :keyword delete-button)
       (begin
	 (if (and delete-button commentId)
	     (for-each
	      (lambda (cid)
		(let ((cmnt (and cid (find-kahua-instance <simple-comment> cid))))
		  (if cmnt
		      ;;(remove-kahua-instance tb)
		      (set! (ref cmnt 'visible) #f))))
	      commentId))
	 (comment-list-form)
      )))

  (with-kahua-web-authorization comment-list-form 'admin))
