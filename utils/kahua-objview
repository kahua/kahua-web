#!/usr/bin/env gosh
;; Object browser example
;;
;;  Copyright (c) 2004 Shawn Taras, All rights reserved.
;;  Copyright (c) 2004 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2004 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: kahua-objview,v 1.8 2004/03/01 06:55:23 shiro Exp $

;; Requires:
;;  Gauche-gl
;;  Gauche-gtk with --enable-glgd-pango
;;  Kahua

;; History:
;;  Shawn Taras wrote GUI part.
;;  Shiro Kawai adapted it to work with actual kahua-web db.

(use srfi-1)
(use srfi-2)
(use srfi-13)
(use gauche.charconv)
(use gauche.parseopt)
(use gauche.collection)
(use gauche.parameter)
(use file.util)
(use util.list)
(use gtk)
(use gtk.gtkgl)
(use gtk.glgd)
(use gl)
(use kahua)

(define (usage)
  (print "kahua-objview [-c config] database-name")
  (exit 0))

(define (main args)
  (gtk-init args)
  (let-args (cdr args) ((conf-file "c=s")
                        . args)
    (unless (= (length args) 1) (usage))
    (kahua-init conf-file)
    (db-init (car args))
    (run-app))
  0)

;;================================================================
;; Database bridge
;;

;; NB: we don't want to have persistent <page-data> definition
;; here, since the persistent definition can be changed.
;; Instead we use metainfo API to retrieve slot values.

(define (obtain-persistent-class dbname classname)
  (or (and-let* ((def (with-db (db dbname)
                        (kahua-persistent-class-definition classname)))
                 (insulator (make-module #f)))
        (eval '(use kahua) insulator)
        (eval def insulator)
        (eval classname insulator))
      (error "No such class in the database: ~a" classname)))

;; In-memory image of page data
(define-class <page> ()
  ((id       :init-keyword :id)
   (key      :init-keyword :key)
   (basename :init-keyword :basename)
   (content  :init-keyword :content)
   (children :init-keyword :children)
   (links    :init-keyword :links)
   (ctime    :init-keyword :ctime)
   (cuser    :init-keyword :cuser)
   (mtime    :init-keyword :mtime)
   (muser    :init-keyword :muser)
   (hidden   :init-keyword :hidden :init-value #f)
   (dirty    :init-value #f)
   (touched  :init-value #f)
   ))

(define-class <db> ()
  ((name     :init-keyword :name)
   (pclass   :init-keyword :pclass)
   (pages    :init-keyword :pages)
   ))

(define the-db (make-parameter #f))

(define-method mark-dirty! ((self <page>))
  (set! (ref self 'dirty) #t))
(define-method clear-dirty! ((self <page>))
  (set! (ref self 'dirty) #f))


;; Read kahua-web contents and creates an in-memory copy
(define (db-init dbname)

  (define (page-data->page data)
    (make <page>
      :id (ref data 'id) :key (ref data 'name)
      :basename (sys-basename (ref data 'name))
      :content (ref data 'content) :children '() :links '()
      :ctime (safe-ref data 'ctime) :cuser (safe-ref data 'cuser)
      :mtime (safe-ref data 'mtime) :muser (safe-ref data 'muser)))
  
  (define (safe-ref obj slot)
    (and (slot-exists? obj slot)
         (slot-bound? obj slot)
         (slot-ref obj slot)))

  ;; main body of db-init
  (with-db (db dbname)
    (let* ((<page-data> (obtain-persistent-class dbname '<page-data>))
           (pages (map page-data->page (make-kahua-collection <page-data>)))
           (db (make <db> :name dbname :pclass <page-data>)))
      (the-db (db-setup-data db pages))))
  )

(define (db-setup-data db pages)

  (define (setup-links page all)
    (set! (ref page 'children)
          (map (cut ref <> 'key)
               (filter (lambda (p)
                         (string-prefix? #`",(ref page 'key)/" (ref p 'key)))
                       all)))
    (set! (ref page 'links)
          (scan-links (ref page 'key) (ref page 'content) all))
    page)

  (define (scan-links self content all)
    (let loop ((content content)
               (links '()))
      (cond ((#/\[\[(.*?)\]\]/ content)
             => (lambda (m)
                  (let ((link (normalize-link self (m 1))))
                    (if (ensure-link link all)
                      (loop (m 'after) (cons link links))
                      (loop (m 'after) links)))))
            (else (reverse! links)))))

  (define (normalize-link self link)
    (cond ((string-prefix? "/" link) link)
          ((string-prefix? "$/" link)
           (build-path self (string-drop link 2)))
          ((string-prefix? "./" link)
           (build-path (sys-dirname self) (string-drop link 2)))
          ((string-prefix? "../" link)
           (simplify-path (build-path (sys-dirname self) link)))
          (else
           (build-path (sys-dirname self) link))))  

  (define (ensure-link link all)
    (find (lambda (p) (equal? (ref p 'key) link)) all))

  (set! (ref db 'pages)
        (map (cut setup-links <> pages) pages))
  db)

;; commit any changes
(define (db-commit)
  (define (page-save page obj)
    (for-each (lambda (slot)
                (set! (ref obj (car slot)) (ref page (cadr slot))))
              '((name key)
                (ctime ctime)
                (cuser cuser)
                (mtime mtime)
                (muser muser)))
    (clear-dirty! page))
  
  (let1 modified (filter (cut ref <> 'dirty) (ref (the-db) 'pages))
    (unless (null? modified)
      (with-db (db (ref (the-db) 'name))
        (let1 objs (make-kahua-collection (ref (the-db) 'pclass))
          (dolist (page modified)
            (cond
             ((find (lambda (obj) (equal? (ref page 'key) (ref obj 'name)))
                    objs)
              => (cut page-save page <>))
             (else
              (page-create page)))))))
    ))

;;================================================================
;; Graphical application
;;

(define-constant GLGD_TRACE_LEVEL 0)
(define-constant KAHUA_DATA_DUMP 0)
(define-constant KAHUA_DATA_NODE 1)
(define-constant PANGO_FONT_BOLD 0)
(define-constant GRAPH_WINDOWWIDTH 800)
(define-constant GRAPH_WINDOWHEIGHT 600)
(define-constant MULTIEDIT_WIDTH 400)
(define-constant MULTIEDIT_HEIGHT 130)
(define-constant INFOEDIT_WIDTH 400)
(define-constant INFOEDIT_HEIGHT 260)
(define-constant INFOWIN_WIDTH 400)
(define-constant INFOWIN_HEIGHT 200)

;; conversion
;;  cv-out str  to display string in gtk widget.
;;  cv-in str   to read string from gtk widget.
(define (cv-out str) (if str (ces-convert str #f "utf8") ""))
(define (cv-in str)  (ces-convert str "utf8" #f))

;; time formatter
(define (format-time time)
  (sys-strftime "%Y/%m/%d %H:%M:%S" (sys-localtime time)))

(define (table-title-add table label l r t b xalign yalign)
  (let1 frame (gtk-frame-new #f)
    (gtk-frame-set-shadow-type frame GTK_SHADOW_ETCHED_OUT)
    (gtk-container-set-border-width frame 1)
    (let1 label (gtk-label-new label)
      (gtk-misc-set-alignment label xalign yalign)
      (gtk-container-add frame label)
      (gtk-widget-show label))
    (gtk-table-attach-defaults table frame l r t b)
    (gtk-widget-show frame))
  )

(define (table-field-add table label l r t b)
  (let1 frame (gtk-frame-new #f)
    (gtk-frame-set-shadow-type frame GTK_SHADOW_ETCHED_OUT)
    (gtk-container-set-border-width frame 1)
    (gtk-misc-set-alignment label 0.5 0.5)
    (gtk-container-add frame label)
    (gtk-widget-show label)
    (gtk-table-attach-defaults table frame l r t b)
    (gtk-widget-show frame))
  )

;;-----------------------------------------------------------
;; Application main widget
;;

(define the-app (make-parameter #f)) ;; <app-objview> singleton

(define-class <app-objview> () ;; application
  ((window)     ;; <gtk-window> : toplevel window
   (graph)      ;; <glgd-graph> : graph
   (graph-pane) ;; <gtk-drawing-area>
   (info-win)   ;; <info-win> : pop-up information window
   (menu-bg)    ;; popup menu
   (normal-cursor :init-form (gdk-cursor-new GDK_LEFT_PTR));; <gdk-cursor>
   (pick-cursor   :init-form (gdk-cursor-new GDK_HAND1))   ;; <gdk-cursor>
   (ctrl-held  :init-value #f)
   (shift-held :init-value #f)
   (select-cont :init-value #f) ;; continuation procs for special action
   (cancel-cont :init-value #f) ;; ditto
   ))

(define-method initialize ((app <app-objview>) initargs)
  (next-method)
  (let* ((glconfig (app-gl-config))
         (window (gtk-window-new GTK_WINDOW_TOPLEVEL)))
    (set! (ref app 'window) window)
    (gtk-window-set-title window "Kahua-web object browser")
    (g-signal-connect window "delete_event" (lambda _ (gtk-main-quit)))
    (let1 vbox (gtk-vbox-new #f 0)
      (gtk-container-add window vbox)
      (gtk-widget-show vbox)

      ;; Drawing area for drawing OpenGL scene ----------
      (let1 drawing-area (build-graph-pane app glconfig)
        (gtk-widget-set-size-request drawing-area
                                     GRAPH_WINDOWWIDTH GRAPH_WINDOWHEIGHT)
        (gtk-box-pack-start vbox drawing-area #t #t 0)
        (set! (ref app 'graph-pane) drawing-area)
        (gtk-widget-show drawing-area))

      ;; Simple quit button -----------------------------
      (let1 button (gtk-button-new-with-label "Quit")
        (gtk-box-pack-start vbox button #f #f 0)
        (g-signal-connect button "clicked" (lambda _ (gtk-main-quit)))
        (gtk-widget-show button)))

    (set! (ref app 'info-win) (make <info-win>))
    (set! (ref app 'menu-bg)  (make <menu-bg>))
    ))

(define-method app-show ((app <app-objview>))
  (gtk-widget-show (ref app 'window)))

(define-method app-initiate-pick ((app <app-objview>)
                                  select-cont cancel-cont)
  (define (reset-cursor)
    (gdk-window-set-cursor (ref (ref app 'window) 'window)
                           (ref app 'normal-cursor)))
  (gdk-window-set-cursor (ref (ref app 'window) 'window)
                         (ref app 'pick-cursor))
  (set! (ref app 'select-cont)
        (lambda (node link event)
          (reset-cursor)
          (set! (ref app 'select-cont) #f)
          (when select-cont (select-cont node link event))))
  (set! (ref app 'cancel-cont)
        (lambda (node link event)
          (reset-cursor)
          (set! (ref app 'cancel-cont) #f)
          (when cancel-cont (cancel-cont node link event))))
  #f)

(define-method app-refresh ((app <app-objview>))
  (db-setup-data (the-db) (ref (the-db) 'pages))
  (glgd-graph-fini (ref app 'graph))
  (graph-build (ref app 'graph) (ref (the-db) 'pages))
  (glgd-graph-connect (ref app 'graph)
                      (ref app 'window)
                      (ref app 'graph-pane)))

(define (app-gl-config)
  (unless (gdk-gl-query-extension)
    (error "*** OpenGL is not supported."))
  (or (gdk-gl-config-new-by-mode (logior GDK_GL_MODE_RGB
                                         GDK_GL_MODE_DEPTH
                                         GDK_GL_MODE_DOUBLE))
      (gdk-gl-config-new-by-mode (logior GDK_GL_MODE_RGB
                                         GDK_GL_MODE_DEPTH))
      (error "*** No appropriate OpenGL-capable visual found.")))

;;---------------------------------------------------------------------
;; Multi-node Information editor functions
;;
;; NOTES: - Uses <g-object-set-data> and <g-object-get-data> to access widgets
;;          internal to the <multi-edit> widget.
;;        - <multi-edit-cuser> is a frame containing a <name-entry> entry
;;        - <multi-edit-muser> is a frame containing a <name-entry> entry
;;        - <name-entry> is a <gtk-entry>
;;
(define (multi-edit-name-frame-new title name)
  (let1 frame (gtk-frame-new title)
    (gtk-frame-set-shadow-type frame GTK_SHADOW_ETCHED_OUT)
    (gtk-container-set-border-width frame 1)
    (let1 hbox (gtk-hbox-new #f 0)
      (gtk-container-add frame hbox)
      (let1 entry (gtk-entry-new)
        (gtk-entry-set-max-length entry 80)
        (unless (eq? name #f)
          (gtk-entry-set-text entry name))
        (gtk-box-pack-start hbox entry #t #t 3)
        (g-object-set-data frame 'name-entry entry)
        (gtk-widget-show entry))
      (gtk-widget-show hbox))
    (gtk-widget-show frame)
    frame))

(define (multi-edit-new window)
  (let1 multi-edit (gtk-dialog-new-with-buttons
                    "Page Editor" #f  
                    (logior GTK_DIALOG_MODAL GTK_DIALOG_DESTROY_WITH_PARENT)
                    GTK_STOCK_OK GTK_RESPONSE_ACCEPT
                    GTK_STOCK_CANCEL GTK_RESPONSE_REJECT)
    (gtk-widget-set-size-request multi-edit MULTIEDIT_WIDTH MULTIEDIT_HEIGHT)
    (gtk-container-set-border-width multi-edit 2)
    (let1 table (gtk-table-new 2 4 #t)
      (gtk-box-pack-start (ref multi-edit 'vbox) table #t #t 0)
      (g-object-set-data multi-edit 'multi-edit-table table)
      (gtk-widget-show table))
    multi-edit))

(define (multi-edit-fill multi-edit graph)
  (let1 table (g-object-get-data multi-edit 'multi-edit-table)
    (table-title-add table "Created by:" 0 1 0 1 1.0 0.5)
    (table-title-add table "Modified by:" 0 1 1 2 1.0 0.5)
    (let1 cuser (multi-edit-name-frame-new #f #f)
      (g-object-set-data multi-edit 'multi-edit-cuser cuser)
      (gtk-table-attach-defaults table cuser 1 4 0 1))
    (let1 muser (multi-edit-name-frame-new #f #f)
      (g-object-set-data multi-edit 'multi-edit-muser muser)
      (gtk-table-attach-defaults table muser 1 4 1 2)))
  #t)

(define (multi-edit-commit multi-edit)
  (dolist (node (graph-selection-get (ref (the-app) 'graph)))
    (let1 record (glgd-node-data-get node)
      (let* ((cuser (g-object-get-data multi-edit 'multi-edit-cuser))
             (name (g-object-get-data cuser 'name-entry)))
        (set! (ref record 'cuser) (cv-in (gtk-entry-get-text name)))
        (mark-dirty! record))
      (let* ((muser (g-object-get-data multi-edit 'multi-edit-muser))
             (name (g-object-get-data muser 'name-entry)))
        (set! (ref record 'muser) (cv-in (gtk-entry-get-text name)))
        (mark-dirty! record))))
  (graph-selection-clear (ref (the-app) 'graph))
  #t)

(define (multi-edit-respond widget response-id)
  (when (eq? response-id GTK_RESPONSE_ACCEPT)
    (multi-edit-commit widget))
  (gtk-widget-destroy widget)
  #t)

;; ===========================================================================
;; Information editor functions
;; ===========================================================================
;; NOTES: - Uses <g-object-set-data> and <g-object-get-data> to access widgets
;;          internal to the <info-edit> widget.
;;        - <info-edit-ctime> is a frame containing the time edit spinners
;;        - <info-edit-mtime> is a frame containing the time edit spinners
;;        - <info-edit-cuser> is a frame containing a <name-entry> entry
;;        - <info-edit-muser> is a frame containing a <name-entry> entry
;;        - <name-entry> is a <gtk-entry>
;;        - <year-spinner> is a <gtk-spin-button>
;;        - <month-spinner> is a <gtk-spin-button>
;;        - <day-spinner> is a <gtk-spin-button>
;;        - <hour-spinner> is a <gtk-spin-button>
;;        - <minute-spinner> is a <gtk-spin-button>
;; ===========================================================================
(define (info-edit-name-frame-new title name)
  (let1 frame (gtk-frame-new title)
    (gtk-frame-set-shadow-type frame GTK_SHADOW_ETCHED_OUT)
    (gtk-container-set-border-width frame 1)
    (let1 hbox (gtk-hbox-new #f 0)
      (gtk-container-add frame hbox)
      (let1 entry (gtk-entry-new)
        (gtk-entry-set-max-length entry 80)
        (unless (eq? name #f)
          (gtk-entry-set-text entry name))
        (gtk-box-pack-start hbox entry #t #t 3)
        (g-object-set-data frame 'name-entry entry)
        (gtk-widget-show entry))
      (gtk-widget-show hbox))
    (gtk-widget-show frame)
    frame))

(define (info-edit-date-frame-new title)
  (let1 frame (gtk-frame-new title)
    (gtk-frame-set-shadow-type frame GTK_SHADOW_ETCHED_OUT)
    (gtk-container-set-border-width frame 1)
    (let1 vbox (gtk-vbox-new #f 0)
      (gtk-container-set-border-width vbox 0)
      (gtk-container-add frame vbox)
      (let1 hbox (gtk-hbox-new #f 0)
    	(gtk-box-pack-start vbox hbox #t #t 5)
    	(let1 year-box (gtk-vbox-new #f 0)
          (gtk-box-pack-start hbox year-box #t #t 4)
          (let* ((adj (gtk-adjustment-new 1900.0 0.0 2200.0 1.0 100.0 0.0))
            	 (spinner (gtk-spin-button-new adj 0 0)))
            (gtk-spin-button-set-wrap spinner #f)
            (gtk-spin-button-set-numeric spinner #t)
            (gtk-widget-set-size-request spinner 55 -1)
            (g-object-set-data frame 'year-spinner spinner)
            (gtk-box-pack-start year-box spinner #f #t 0)
            (gtk-widget-show spinner))
          (gtk-widget-show year-box))
    	(let1 month-box (gtk-vbox-new #f 0)
          (gtk-box-pack-start hbox month-box #t #t 4)
          (let* ((adj (gtk-adjustment-new 1.0 1.0 12.0 1.0 5.0 0.0))
            	 (spinner (gtk-spin-button-new adj 0 0)))
            (gtk-spin-button-set-wrap spinner #t)
            (gtk-spin-button-set-numeric spinner #t)
            (g-object-set-data frame 'month-spinner spinner)
            (gtk-box-pack-start month-box spinner #f #t 0)
            (gtk-widget-show spinner))
          (gtk-widget-show month-box))
    	(let1 day-box (gtk-vbox-new #f 0)
          (gtk-box-pack-start hbox day-box #t #t 4)
          (let* ((adj (gtk-adjustment-new 1.0 1.0 31.0 1.0 5.0 0.0))
            	 (spinner (gtk-spin-button-new adj 0 0)))
            (gtk-spin-button-set-wrap spinner #t)
            (gtk-spin-button-set-numeric spinner #t)
            (g-object-set-data frame 'day-spinner spinner)
            (gtk-box-pack-start day-box spinner #f #t 0)
            (gtk-widget-show spinner))
          (gtk-widget-show day-box))
    	(let1 hour-box (gtk-vbox-new #f 0)
          (gtk-box-pack-start hbox hour-box #t #t 4)
          (let* ((adj (gtk-adjustment-new 12.0 0.0 23.0 1.0 5.0 0.0))
            	 (spinner (gtk-spin-button-new adj 0 0)))
            (gtk-spin-button-set-wrap spinner #t)
            (gtk-spin-button-set-numeric spinner #t)
            (g-object-set-data frame 'hour-spinner spinner)
            (gtk-box-pack-start hour-box spinner #f #t 0)
            (gtk-widget-show spinner))
          (gtk-widget-show hour-box))
    	(let1 minute-box (gtk-vbox-new #f 0)
          (gtk-box-pack-start hbox minute-box #t #t 4)
          (let* ((adj (gtk-adjustment-new 0.0 0.0 59.0 1.0 5.0 0.0))
            	 (spinner (gtk-spin-button-new adj 0 0)))
            (gtk-spin-button-set-wrap spinner #t)
            (gtk-spin-button-set-numeric spinner #t)
            (g-object-set-data frame 'minute-spinner spinner)
            (gtk-box-pack-start minute-box spinner #f #t 0)
            (gtk-widget-show spinner))
          (gtk-widget-show minute-box))
        (gtk-widget-show hbox))
      (gtk-widget-show vbox))
    (gtk-widget-show frame)
    frame))

(define (info-edit-new window)
  (let1 info-edit (gtk-dialog-new-with-buttons
                   "Page Editor" #f  
                   (logior GTK_DIALOG_MODAL GTK_DIALOG_DESTROY_WITH_PARENT)
                   GTK_STOCK_OK GTK_RESPONSE_ACCEPT
                   GTK_STOCK_CANCEL GTK_RESPONSE_REJECT)
    (gtk-widget-set-size-request info-edit INFOEDIT_WIDTH INFOEDIT_HEIGHT)
    (gtk-container-set-border-width info-edit 2)
    (let1 table (gtk-table-new 5 4 #t)
      (gtk-box-pack-start (ref info-edit 'vbox) table #t #t 0)
      (g-object-set-data info-edit 'info-edit-table table)
      (gtk-widget-show table))
    info-edit))

(define (info-edit-date-fill info-edit-date time)
  (let* ((tm (sys-localtime time))
         (year (g-object-get-data info-edit-date 'year-spinner))
         (month (g-object-get-data info-edit-date 'month-spinner))
         (day (g-object-get-data info-edit-date 'day-spinner))
         (hour (g-object-get-data info-edit-date 'hour-spinner))
         (minute (g-object-get-data info-edit-date 'minute-spinner)))
    (gtk-spin-button-set-value year (+ 1900 (ref tm 'year)))
    (gtk-spin-button-set-value month (+ 1 (ref tm 'mon)))
    (gtk-spin-button-set-value day (ref tm 'mday))
    (gtk-spin-button-set-value hour (ref tm 'hour))
    (gtk-spin-button-set-value minute (ref tm 'min)))
  #t)

(define (info-edit-fill info-edit node)
  (let1 table (g-object-get-data info-edit 'info-edit-table)
    (table-title-add table "Page Title:" 0 1 0 1 1.0 0.5)
    (table-title-add table "Created on:" 0 1 1 2 1.0 0.5)
    (table-title-add table "by:" 0 1 2 3 1.0 0.5)
    (table-title-add table "Modified on:" 0 1 3 4 1.0 0.5)
    (table-title-add table "by:" 0 1 4 5 1.0 0.5)
    (let1 record (glgd-node-data-get node)
      (unless (null? record)
        (let1 page-name (format "~a [~a]"
                                (ref record 'basename)
                                (ref record 'key))
          (table-title-add table (cv-out page-name) 1 4 0 1 0.5 0.5))
        (let1 ctime (info-edit-date-frame-new #f)
          (info-edit-date-fill ctime (ref record 'ctime))
          (g-object-set-data info-edit 'info-edit-ctime ctime)
          (gtk-table-attach-defaults table ctime 1 4 1 2))
        (let1 cuser (info-edit-name-frame-new
                     #f
                     (if (eq? (ref record 'cuser) #f)
                       #f
                       (cv-out (ref record 'cuser))))
          (g-object-set-data info-edit 'info-edit-cuser cuser)
          (gtk-table-attach-defaults table cuser 1 4 2 3))
        (let1 mtime (info-edit-date-frame-new #f)
          (info-edit-date-fill mtime (ref record 'mtime))
          (g-object-set-data info-edit 'info-edit-mtime mtime)
          (gtk-table-attach-defaults table mtime 1 4 3 4))
        (let1 muser (info-edit-name-frame-new
                     #f
                     (if (eq? (ref record 'muser) #f)
                       #f
                       (cv-out (ref record 'muser))))
          (g-object-set-data info-edit 'info-edit-muser muser)
          (gtk-table-attach-defaults table muser 1 4 4 5)))))
  #t)

(define (info-edit-date-get info-edit-date)
  (let* ((year (g-object-get-data info-edit-date 'year-spinner))
         (month (g-object-get-data info-edit-date 'month-spinner))
         (day (g-object-get-data info-edit-date 'day-spinner))
         (hour (g-object-get-data info-edit-date 'hour-spinner))
         (minute (g-object-get-data info-edit-date 'minute-spinner))
         (tm (sys-localtime 0)))
    (slot-set! tm 'sec 0)
    (slot-set! tm 'min (gtk-spin-button-get-value-as-int minute))
    (slot-set! tm 'hour (gtk-spin-button-get-value-as-int hour))
    (slot-set! tm 'mday (gtk-spin-button-get-value-as-int day))
    (slot-set! tm 'mon (- (gtk-spin-button-get-value-as-int month) 1))
    (slot-set! tm 'year (- (gtk-spin-button-get-value-as-int year) 1900))
    (let1 posix-time (sys-mktime tm)
      posix-time)))

(define (info-edit-commit info-edit)
  (let* ((node (g-object-get-data info-edit 'node))
         (record (glgd-node-data-get node)))
    (let1 posix-time (info-edit-date-get
                      (g-object-get-data info-edit 'info-edit-ctime))
      (set! (ref record 'ctime) posix-time)
      (mark-dirty! record))
    (let* ((cuser (g-object-get-data info-edit 'info-edit-cuser))
           (name (g-object-get-data cuser 'name-entry)))
      (set! (ref record 'cuser) (cv-in (gtk-entry-get-text name)))
      (mark-dirty! record))
    (let1 posix-time (info-edit-date-get
                      (g-object-get-data info-edit 'info-edit-mtime))
      (set! (ref record 'mtime) posix-time)
      (mark-dirty! record))
    (let* ((muser (g-object-get-data info-edit 'info-edit-muser))
           (name (g-object-get-data muser 'name-entry)))
      (set! (ref record 'muser) (cv-in (gtk-entry-get-text name)))
      (mark-dirty! record))
    #t))

(define (info-edit-respond widget response-id)
  (when (eq? response-id GTK_RESPONSE_ACCEPT)
    (info-edit-commit widget))
  (gtk-widget-destroy widget)
  #t)

(define (info-edit-single-show graph)
  (let* ((info-edit (info-edit-new #f))
         (node (glgd-graph-node-selected graph 0)))
    (unless (eq? node #f)
      (info-edit-fill info-edit node)
      (g-object-set-data info-edit 'node node)
      (g-signal-connect info-edit "response" info-edit-respond)
      (gtk-window-set-position info-edit GTK_WIN_POS_MOUSE)
      (gtk-widget-show info-edit)))
  #t)

(define (info-edit-multi-show graph)
  (let1 multi-edit (multi-edit-new #f)
    (multi-edit-fill multi-edit graph)
    (g-object-set-data multi-edit 'graph graph)
    (g-signal-connect multi-edit "response" multi-edit-respond)
    (gtk-window-set-position multi-edit GTK_WIN_POS_MOUSE)
    (gtk-widget-show multi-edit))
  #t)

(define (info-edit-show graph)
  (let1 select-count (glgd-graph-node-select-count graph)
    (cond ((> select-count 1) (info-edit-multi-show graph))
          ((= select-count 1) (info-edit-single-show graph))))
  #t)

;;---------------------------------------------------------
;; Information window
;;

(define-class <info-win> ()
  ((window)
   (labels :init-value '()) ;; assoc list
   ))

(define-method initialize ((self <info-win>) initargs)
  (next-method)
  (let1 info-win (gtk-window-new GTK_WINDOW_POPUP)
    (set! (ref self 'window) info-win)
    (gtk-window-set-decorated info-win #f)
    (gtk-widget-set-size-request info-win INFOWIN_WIDTH INFOWIN_HEIGHT)
    (gtk-container-set-border-width info-win 2)
    (let1 frame (gtk-frame-new #f)
      (gtk-container-add info-win frame)
      (gtk-frame-set-shadow-type frame GTK_SHADOW_ETCHED_IN)
      (gtk-widget-show frame)
      (let1 table (gtk-table-new 6 4 #t)
        (gtk-container-add frame table)
        (for-each (lambda (labdesc)
                    (let1 lab (gtk-label-new "")
                      (push! (ref self 'labels) (cons (car labdesc) lab))
                      (apply table-field-add table lab (cdr labdesc))))
                  '((key 1 4 0 1)
                    (basename 1 4 1 2)
                    (children 1 4 2 3)
                    (links 1 4 3 4)
                    (ctime 1 3 4 5)
                    (cuser 3 4 4 5)
                    (mtime 1 3 5 6)
                    (muser 3 4 5 6)))
        (table-title-add table "Key:" 0 1 0 1 1.0 0.5)
        (table-title-add table "Basename:" 0 1 1 2 1.0 0.5)
        (table-title-add table "Children:" 0 1 2 3 1.0 0.5)
        (table-title-add table "Links:" 0 1 3 4 1.0 0.5)
        (table-title-add table "Created:" 0 1 4 5 1.0 0.5)
        (table-title-add table "Modified:" 0 1 5 6 1.0 0.5)
        (gtk-widget-show table))
      (gtk-widget-show frame))))

(define-method get-label ((self <info-win>) name)
  (assq-ref (ref self 'labels) name))

(define-method info-win-fill ((self <info-win>) node)
  (let1 record (glgd-node-data-get node)
    (unless (null? record)
      (gtk-label-set-text (get-label self 'key)
                          (cv-out (ref record 'key)))
      (gtk-label-set-text (get-label self 'basename)
                          (cv-out (ref record 'basename)))
      (gtk-label-set-text (get-label self 'children)
                          #`",(kahua-record-child-count record)")
      (gtk-label-set-text (get-label self 'links)
                          #`",(kahua-record-link-count record)")
      (gtk-label-set-text (get-label self 'ctime)
                          (format-time (ref record 'ctime)))
      (gtk-label-set-text (get-label self 'cuser)
                          (cond ((ref record 'cuser) => cv-out)
                                (else "")))
      (gtk-label-set-text (get-label self 'mtime)
                          (format-time (ref record 'mtime)))
      (gtk-label-set-text (get-label self 'muser)
                          (cond ((ref record 'muser) => cv-out)
                                (else "")))
      ))
  #t)
  
(define (info-win-show info-win graph)
  (let1 node (glgd-graph-node-selected graph 0)
    (unless (eq? node #f)
      (info-win-fill info-win node)
      (gtk-window-set-position (ref info-win 'window) GTK_WIN_POS_MOUSE)
      (gtk-widget-show (ref info-win 'window)))))

(define (info-win-hide info-win)
  (gtk-widget-hide (ref info-win 'window)))

;;----------------------------------------------------------------
;; Background menu functions
;;
(define-class <menu-bg> (<gtk-menu>)
  ((show-data) ;; menu-item
   (edit-data) ;; menu-item
   (reparent)  ;; menu-item
   (commit)    ;; menu-item
   ))

(define-method initialize ((self <menu-bg>) initargs)
  (next-method)
  (menu-bg-initialize self))

(define (menu-bg-initialize menu)
  (define (menu-cb-frame-all event . _)
    (glgd-graph-frame (ref (the-app) 'graph)) #t)

  (define (menu-cb-show-data event . _)
    (info-win-show (ref (the-app) 'info-win) (ref (the-app) 'graph)) #t)

  (define (menu-cb-edit-data event . _)
    (info-edit-show (ref (the-app) 'graph)) #t)

  (define (menu-cb-reparent event . _)
    (app-initiate-pick (the-app)
                       (lambda (node select event)
                         (graph-reparent (ref (the-app) 'graph) node))
                       #f)
    #t)

  (define (menu-cb-expand-all event . _)
    (glgd-graph-attribute-set (ref (the-app) 'graph) KAHUA_DATA_NODE)
    (glgd-graph-auto-organize (ref (the-app) 'graph) 0.0 0.0)
    #t)

  (define (menu-cb-collapse-all event . _)
    (glgd-graph-attribute-reset (ref (the-app) 'graph) KAHUA_DATA_NODE)
    (glgd-graph-auto-organize (ref (the-app) 'graph) 0.0 0.0)
    #t)

  (define (menu-cb-save event . _)
    (db-commit) #t)

  (let1 menu-item (gtk-menu-item-new-with-label "Frame all")
    (gtk-menu-shell-append menu menu-item)
    (g-signal-connect menu-item "activate" menu-cb-frame-all)
    (gtk-widget-show menu-item))
  (let1 separator (gtk-separator-menu-item-new)
    (gtk-menu-shell-append menu separator)
    (gtk-widget-show separator))
  (let1 menu-item (gtk-menu-item-new-with-label "Show data...")
    (gtk-menu-shell-append menu menu-item)
    (set! (ref menu 'show-data) menu-item)
    (g-signal-connect menu-item "activate" menu-cb-show-data)
    (gtk-widget-set-sensitive menu-item #f)
    (gtk-widget-show menu-item))
  (let1 menu-item (gtk-menu-item-new-with-label "Edit data...")
    (gtk-menu-shell-append menu menu-item)
    (set! (ref menu 'edit-data) menu-item)
    (g-signal-connect menu-item "activate" menu-cb-edit-data)
    (gtk-widget-set-sensitive menu-item #f)
    (gtk-widget-show menu-item))
  (let1 menu-item (gtk-menu-item-new-with-label "Reparent")
    (gtk-menu-shell-append menu menu-item)
    (set! (ref menu 'reparent) menu-item)
    (g-signal-connect menu-item "activate" menu-cb-reparent)
    (gtk-widget-set-sensitive menu-item #f)
    (gtk-widget-show menu-item))
  (let1 separator (gtk-separator-menu-item-new)
    (gtk-menu-shell-append menu separator)
    (gtk-widget-show separator))
  (let1 menu-item (gtk-menu-item-new-with-label "Expand all")
    (gtk-menu-shell-append menu menu-item)
    (g-signal-connect menu-item "activate" menu-cb-expand-all)
    (gtk-widget-show menu-item))
  (let1 menu-item (gtk-menu-item-new-with-label "Collapse All")
    (gtk-menu-shell-append menu menu-item)
    (g-signal-connect menu-item "activate" menu-cb-collapse-all)
    (gtk-widget-show menu-item))
  (let1 separator (gtk-separator-menu-item-new)
    (gtk-menu-shell-append menu separator)
    (gtk-widget-show separator))
  (let1 menu-item (gtk-menu-item-new-with-label "Commit Changes")
    (gtk-menu-shell-append menu menu-item)
    (set! (ref menu 'commit) menu-item)
    (g-signal-connect menu-item "activate" menu-cb-save)
    (gtk-widget-set-sensitive menu-item #f)
    (gtk-widget-show menu-item))
  #t)

(define-method menu-popup ((self <menu-bg>) event)
  (let* ((graph (ref (the-app) 'graph))
         (nsels (glgd-graph-node-select-count graph)))
    (gtk-widget-set-sensitive (ref self 'show-data) (= nsels 1))
    (gtk-widget-set-sensitive (ref self 'edit-data) (> nsels 0))
    (gtk-widget-set-sensitive (ref self 'reparent)  (> nsels 0))
    )
  (gtk-widget-set-sensitive
   (ref self 'commit)
   (not (not (find (cut ref <> 'dirty) (ref (the-db) 'pages)))))
  (gtk-menu-popup self #f #f #f (ref event 'button) (ref event 'time)))

;;----------------------------------------------------------
;; <glgdGraph> callback functions
;;
(define (key-callback graph node link event)
  (when (= (ref event 'type) GDK_KEY_PRESS)
    (let1 kv (ref event 'keyval)
      (cond
       ((= kv GDK_Escape) (gtk-main-quit))
       ((= kv GDK_Control_L) (set! (ref (the-app) 'ctrl-held) #t))
       ((= kv GDK_Control_R) (set! (ref (the-app) 'ctrl-held) #t))
       ((= kv GDK_Shift_L) (set! (ref (the-app) 'shift-held) #t))
       ((= kv GDK_Shift_R) (set! (ref (the-app) 'shift-held) #t)))))
  (when (= (ref event 'type) GDK_KEY_RELEASE)
    (let1 kv (ref event 'keyval)
      (cond
       ((= kv GDK_Control_L) (set! (ref (the-app) 'ctrl-held) #f))
       ((= kv GDK_Control_R) (set! (ref (the-app) 'ctrl-held) #f))
       ((= kv GDK_Shift_L) (set! (ref (the-app) 'shift-held) #f))
       ((= kv GDK_Shift_R) (set! (ref (the-app) 'shift-held) #f)))))
  #t)

(define (mouse-right-callback graph node link event)
  (when (= (ref event 'type) GDK_BUTTON_PRESS)
    (cond ((ref (the-app) 'cancel-cont) => (cut <> node link event)))
    (menu-popup (ref (the-app) 'menu-bg) event))
  #t)

(define (mouse-left-callback graph node link event)
  (when (= (ref event 'type) GDK_BUTTON_PRESS)
    (cond
     ((ref (the-app) 'select-cont) => (cut <> node link event))
     ((or (ref (the-app) 'ctrl-held)
          (ref (the-app) 'shift-held))
      (graph-selection-toggle graph node))
     ((>= (glgd-node-id-get node) 0)
      (graph-selection-clear graph)
      (unless (glgd-node-is-selected node) (graph-selection-add graph node)))
     (else (graph-selection-clear graph))))
  (when (= (ref event 'type) GDK_BUTTON_RELEASE)
    (info-win-hide (ref (the-app) 'info-win)))
  #t)

(define (mouse-hover-callback graph node link event)
  (glgd-graph-node-list-flag graph GLGDNODE_FLAG_HILITE GLGD_FLAGOP_CLEAR)
  (if (= (glgd-graph-link-index graph link) -1)
    (if (>= (glgd-node-id-get node) -1)
      (glgd-node-flags-set node GLGDNODE_FLAG_HILITE GLGD_FLAGOP_SET)))
  #t)

(define (graph-selection-add graph node)
  (glgd-node-flags-set node GLGDNODE_FLAG_SELECTED GLGD_FLAGOP_SET))

(define (graph-selection-toggle graph node)
  (glgd-node-flags-set node GLGDNODE_FLAG_SELECTED GLGD_FLAGOP_TOGGLE))

(define (graph-selection-clear graph)
  (glgd-graph-node-list-flag graph GLGDNODE_FLAG_SELECTED GLGD_FLAGOP_CLEAR))

(define (graph-selection-get graph)
  (filter-map (lambda (index)
                (and-let* ((node (glgd-graph-node-by-id graph index))
                           ((glgd-node-is-selected node)))
                  node))
              (iota (glgd-graph-node-count graph))))

(define (graph-reparent graph node)
  (let ((parent    (and node (glgd-node-data-get node)))
        (selection (graph-selection-get graph)))
    (cond
     ((not parent) (graph-selection-clear graph))
     ((memq node selection)
      (print "Can't be a parent node of itself."))
     (else
      (let1 parent-key (ref parent 'key)
        (dolist (n selection)
          (and-let* ((rec (glgd-node-data-get n)))
            (set! (ref rec 'key) (build-path parent-key (ref rec 'basename)))
            ))
        (graph-selection-clear graph)
        (app-refresh (the-app))))))
  #f)

;; ===================================
;; Kahua Data to <glgdGraph> functions
;; ===================================
(define (kahua-record-by-key kahua-data key)
  (find (lambda (record) (equal? (ref record 'key) key)) kahua-data))

(define (kahua-record-index-by-key kahua-data key)
  (list-index (lambda (record) (equal? (ref record 'key) key)) kahua-data))

(define (kahua-record-child-count record)
  (length (ref record 'children)))
    
(define (kahua-record-link-count record)
  (length (ref record 'links)))

(define (kahua-data-touch kahua-data do-touch)
  (dolist (record kahua-data)
    (set! (ref record 'touched) do-touch))
  #t)
    
(define (glgd-graph-node-from-kahua graph kahua-data node-id)
  ;; Add this node to the graph
  ;; --------------------------
  (let1 node (glgd-node-create)
    (let1 label (cv-out (ref (car kahua-data) 'basename))
      (glgd-node-data-set node (car kahua-data))
      (glgd-node-info-set node label node-id))
    (glgd-node-attribute-set node KAHUA_DATA_NODE)
    (glgd-graph-node-add graph node))
  
  ;; Recursively add next node
  ;; -------------------------
  (unless (null? (cdr kahua-data))
    (glgd-graph-node-from-kahua graph (cdr kahua-data) (+ node-id 1)))
  #t)

(define (glgd-graph-link-from-kahua graph list parent-index parent children)
  (let1 src-node (glgd-graph-node-by-id graph parent-index)
    (set! (ref parent 'touched) #t)
    (dolist (child-key children)
      (let* ((child-record (kahua-record-by-key (ref (the-db) 'pages) child-key))
             (child-index (kahua-record-index-by-key (ref (the-db) 'pages) child-key))
             (dst-node (glgd-graph-node-by-id graph child-index))
             (link (glgd-link-create)))
        (glgd-link-set link src-node dst-node)
        (glgd-graph-link-add graph list link)
        (set! (ref child-record 'touched) #t)
        (when (> (length (ref child-record 'children)) 0)
          (glgd-graph-tree-from-kahua graph list child-record child-index)))))
  #t)

(define (glgd-graph-tree-from-kahua graph list record record-index)
  (let* ((parent record)
         (children (ref record 'children)))
    (glgd-graph-link-from-kahua graph list record-index parent children))
  #t)
  
(define (glgd-graph-loner-from-kahua graph list record record-index)
  (let* ((link (glgd-link-create))
         (src-node (glgd-graph-node-by-id graph record-index)))
    (glgd-link-set link src-node src-node)
    (glgd-graph-link-add graph list link))
  #t)

(define (graph-build graph kahua-data)
  (glgd-graph-init graph)

  ;; Recursively add all kahua pages to the graph as <glgdNode's>
  ;; ------------------------------------------------------------
  (glgd-graph-node-from-kahua graph kahua-data 0)
  
  ;; Clear touch flags for kahua-data
  ;; --------------------------------
  (kahua-data-touch kahua-data #f)

  ;; First Pass! kahua records with children
  ;; ---------------------------------------
  (let* ((records kahua-data)
         (record-count (length records)))
    (dotimes (record-index record-count)
      (unless (eq? (ref (car records) 'touched) #t)
        (when (> (kahua-record-child-count (car records)) 0)
          (let* ((list (glgd-link-list-create))
                 (record (car records)))
            (glgd-graph-tree-from-kahua graph list record record-index)
            (glgd-graph-link-list-add graph list))))
      (set! records (cdr records))))
  
  ;; Second Pass! kahua records without children
  ;; -------------------------------------------
  (let* ((records kahua-data)
         (record-count (length records)))
    (dotimes (record-index record-count)
      (unless (eq? (ref (car records) 'touched) #t)
        (unless (> (kahua-record-child-count (car records)) 0)
          (let* ((list (glgd-link-list-create))
                 (record (car records)))
            (glgd-graph-loner-from-kahua graph list record record-index)
            (glgd-graph-link-list-add graph list))))
      (set! records (cdr records))))

  (glgd-graph-attribute-set graph KAHUA_DATA_NODE)
  (glgd-graph-auto-organize graph 0.0 0.0)
  (glgd-graph-callback-set graph GLGDGRAPH_FN_KEY key-callback)
  (glgd-graph-callback-set graph GLGDGRAPH_FN_MOUSE_LEFT mouse-left-callback)
  (glgd-graph-callback-set graph GLGDGRAPH_FN_MOUSE_RIGHT mouse-right-callback)
  (glgd-graph-callback-set graph GLGDGRAPH_FN_MOUSE_HOVER mouse-hover-callback)
  (if (> KAHUA_DATA_DUMP 0)
    (glgd-graph-link-list-dump graph))
  (if (> PANGO_FONT_BOLD 0)
    (glgd-graph-flags-set graph GLGDGRAPH_FLAG_PANGOBOLD GLGD_FLAGOP_SET))
  #t)
  
;;----------------------------------------------------------------
;; Graph pane
;;

(define (build-graph-pane app glconfig)

  (define (draw widget . _)
    (let ((glcontext (gtk-widget-get-gl-context widget))
          (gldrawable (gtk-widget-get-gl-drawable widget)))
      (when (gdk-gl-drawable-gl-begin gldrawable glcontext)
        (gl-clear (logior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
        (glgd-graph-draw (ref (the-app) 'graph))
        (if (gdk-gl-drawable-is-double-buffered gldrawable)
          (gdk-gl-drawable-swap-buffers gldrawable)
          (gl-flush))
        (gdk-gl-drawable-gl-end gldrawable))
      #t))

  (define (reshape widget . _)
    (let* ((glcontext (gtk-widget-get-gl-context widget))
           (gldrawable (gtk-widget-get-gl-drawable widget))
           (wsize (ref widget 'allocation))
           (h (/ (ref wsize 'height) (ref wsize 'width))))
      (when (gdk-gl-drawable-gl-begin gldrawable glcontext)
        (gl-viewport 0 0 (ref wsize 'width) (ref wsize 'height))
        (gdk-gl-drawable-gl-end gldrawable))
      #t)
    (glgd-graph-reshape (ref (the-app) 'graph)))

  (define (init widget)
    (let ((glcontext (gtk-widget-get-gl-context widget))
          (gldrawable (gtk-widget-get-gl-drawable widget)))
      (when (gdk-gl-drawable-gl-begin gldrawable glcontext)
        (gl-light GL_LIGHT0 GL_POSITION '#f32(5.0 5.0 10.0 0.0))
        (gl-enable GL_CULL_FACE)
        (gl-enable GL_LIGHTING)
        (gl-enable GL_LIGHT0)
        (gl-enable GL_DEPTH_TEST)
        (gl-enable GL_NORMALIZE)
        (gdk-gl-drawable-gl-end gldrawable))))

  ;; build-graph-pane
  (let ((self  (gtk-drawing-area-new))
        (graph (glgd-graph-create)))
    (gtk-widget-set-gl-capability self glconfig #f #t GDK_GL_RGBA_TYPE)
    (gtk-widget-set-events self (logior GDK_EXPOSURE_MASK
                                        GDK_VISIBILITY_NOTIFY_MASK))
    (g-signal-connect self "realize" init)
    (g-signal-connect self "configure_event" reshape)
    (g-signal-connect self "expose_event" draw)
    (graph-build graph (ref (the-db) 'pages))
    (glgd-graph-connect graph (ref app 'window) self)
    (set! (ref app 'graph) graph)
    self))

;;----------------------------------------------------------------
;; GUI application entry
;;
(define (run-app)
  (the-app (make <app-objview>))
  (app-show (the-app))
  (gtk-main)
  (glgd-graph-fini (ref (the-app) 'graph)))

;; Local variables:
;; mode: scheme
;; end:

